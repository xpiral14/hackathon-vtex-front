{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\n\nfunction last(...a) {\n  return a[a.length - 1];\n}\n\nfunction negation(a) {\n  return -a;\n}\n\nfunction addition(a, b) {\n  return a + b;\n}\n\nfunction subtraction(a, b) {\n  return a - b;\n}\n\nfunction multiplication(a, b) {\n  return a * b;\n}\n\nfunction division(a, b) {\n  return a / b;\n}\n\nfunction factorial(a) {\n  if (a % 1 || !(+a >= 0)) return NaN;\n  if (a > 170) return Infinity;else if (a === 0) return 1;else {\n    return a * factorial(a - 1);\n  }\n}\n\nfunction power(a, b) {\n  return a ** b;\n}\n\nfunction sqrt(a) {\n  return Math.sqrt(a);\n}\n\nfunction max(...a) {\n  return Math.max(...a);\n}\n\nfunction min(...a) {\n  return Math.min(...a);\n}\n\nfunction comma(...a) {\n  return Array.of(...a);\n}\n\nconst defaultMathSymbols = {\n  symbols: {\n    '!': {\n      postfix: {\n        symbol: '!',\n        f: factorial,\n        notation: 'postfix',\n        precedence: 6,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '!',\n      regSymbol: '!'\n    },\n    '^': {\n      infix: {\n        symbol: '^',\n        f: power,\n        notation: 'infix',\n        precedence: 5,\n        rightToLeft: 1,\n        argCount: 2\n      },\n      symbol: '^',\n      regSymbol: '\\\\^'\n    },\n    '*': {\n      infix: {\n        symbol: '*',\n        f: multiplication,\n        notation: 'infix',\n        precedence: 4,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: '*',\n      regSymbol: '\\\\*'\n    },\n    '/': {\n      infix: {\n        symbol: '/',\n        f: division,\n        notation: 'infix',\n        precedence: 4,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: '/',\n      regSymbol: '/'\n    },\n    '+': {\n      infix: {\n        symbol: '+',\n        f: addition,\n        notation: 'infix',\n        precedence: 2,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      prefix: {\n        symbol: '+',\n        f: last,\n        notation: 'prefix',\n        precedence: 3,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '+',\n      regSymbol: '\\\\+'\n    },\n    '-': {\n      infix: {\n        symbol: '-',\n        f: subtraction,\n        notation: 'infix',\n        precedence: 2,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      prefix: {\n        symbol: '-',\n        f: negation,\n        notation: 'prefix',\n        precedence: 3,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '-',\n      regSymbol: '-'\n    },\n    ',': {\n      infix: {\n        symbol: ',',\n        f: comma,\n        notation: 'infix',\n        precedence: 1,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: ',',\n      regSymbol: ','\n    },\n    '(': {\n      prefix: {\n        symbol: '(',\n        f: last,\n        notation: 'prefix',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '(',\n      regSymbol: '\\\\('\n    },\n    ')': {\n      postfix: {\n        symbol: ')',\n        f: undefined,\n        notation: 'postfix',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: ')',\n      regSymbol: '\\\\)'\n    },\n    min: {\n      func: {\n        symbol: 'min',\n        f: min,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'min',\n      regSymbol: 'min\\\\b'\n    },\n    max: {\n      func: {\n        symbol: 'max',\n        f: max,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'max',\n      regSymbol: 'max\\\\b'\n    },\n    sqrt: {\n      func: {\n        symbol: 'sqrt',\n        f: sqrt,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'sqrt',\n      regSymbol: 'sqrt\\\\b'\n    }\n  }\n}; // based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js\n\n/**\n * Parse errors.md and turn it into a simple hash of code: message\n * @private\n */\n\nconst ERRORS = {\n  \"1\": \"Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\\n\\n\",\n  \"2\": \"Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\\n\\n\",\n  \"3\": \"Passed an incorrect argument to a color function, please pass a string representation of a color.\\n\\n\",\n  \"4\": \"Couldn't generate valid rgb string from %s, it returned %s.\\n\\n\",\n  \"5\": \"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\\n\\n\",\n  \"6\": \"Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\\n\\n\",\n  \"7\": \"Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\\n\\n\",\n  \"8\": \"Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\\n\\n\",\n  \"9\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n  \"10\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n  \"11\": \"Invalid value passed as base to modularScale, expected number or em string but got \\\"%s\\\"\\n\\n\",\n  \"12\": \"Expected a string ending in \\\"px\\\" or a number passed as the first argument to %s(), got \\\"%s\\\" instead.\\n\\n\",\n  \"13\": \"Expected a string ending in \\\"px\\\" or a number passed as the second argument to %s(), got \\\"%s\\\" instead.\\n\\n\",\n  \"14\": \"Passed invalid pixel value (\\\"%s\\\") to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"15\": \"Passed invalid base value (\\\"%s\\\") to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"16\": \"You must provide a template to this method.\\n\\n\",\n  \"17\": \"You passed an unsupported selector state to this method.\\n\\n\",\n  \"18\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n  \"19\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n  \"20\": \"expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n  \"21\": \"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n  \"22\": \"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n  \"23\": \"fontFace expects a name of a font-family.\\n\\n\",\n  \"24\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n  \"25\": \"fontFace expects localFonts to be an array.\\n\\n\",\n  \"26\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n  \"27\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"28\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n  \"29\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n  \"30\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n  \"31\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\\n\\n\",\n  \"32\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\\n\\n\",\n  \"33\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\\n\\n\",\n  \"34\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n  \"35\": \"borderRadius expects one of \\\"top\\\", \\\"bottom\\\", \\\"left\\\" or \\\"right\\\" as the first argument.\\n\\n\",\n  \"36\": \"Property must be a string value.\\n\\n\",\n  \"37\": \"Syntax Error at %s.\\n\\n\",\n  \"38\": \"Formula contains a function that needs parentheses at %s.\\n\\n\",\n  \"39\": \"Formula is missing closing parenthesis at %s.\\n\\n\",\n  \"40\": \"Formula has too many closing parentheses at %s.\\n\\n\",\n  \"41\": \"All values in a formula must have the same unit or be unitless.\\n\\n\",\n  \"42\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n  \"43\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n  \"44\": \"Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\\n\\n\",\n  \"45\": \"Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\\n\\n\",\n  \"46\": \"Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\\n\\n\",\n  \"47\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n  \"48\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n  \"49\": \"Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n  \"50\": \"Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\\n\\n\",\n  \"51\": \"Expects the first argument object to have the properties prop, fromSize, and toSize.\\n\\n\",\n  \"52\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n  \"53\": \"fontFace expects localFonts to be an array.\\n\\n\",\n  \"54\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n  \"55\": \"fontFace expects a name of a font-family.\\n\\n\",\n  \"56\": \"linearGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"57\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"58\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n  \"59\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n  \"60\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n  \"61\": \"Property must be a string value.\\n\\n\",\n  \"62\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n  \"63\": \"borderRadius expects one of \\\"top\\\", \\\"bottom\\\", \\\"left\\\" or \\\"right\\\" as the first argument.\\n\\n\",\n  \"64\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n  \"65\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\\n\\n\",\n  \"66\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n  \"67\": \"You must provide a template to this method.\\n\\n\",\n  \"68\": \"You passed an unsupported selector state to this method.\\n\\n\",\n  \"69\": \"Expected a string ending in \\\"px\\\" or a number passed as the first argument to %s(), got %s instead.\\n\\n\",\n  \"70\": \"Expected a string ending in \\\"px\\\" or a number passed as the second argument to %s(), got %s instead.\\n\\n\",\n  \"71\": \"Passed invalid pixel value %s to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"72\": \"Passed invalid base value %s to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"73\": \"Please provide a valid CSS variable.\\n\\n\",\n  \"74\": \"CSS variable not found.\\n\"\n};\n/**\n * super basic version of sprintf\n * @private\n */\n\nfunction format(...args) {\n  let a = args[0];\n  const b = [];\n  let c;\n\n  for (c = 1; c < args.length; c += 1) {\n    b.push(args[c]);\n  }\n\n  b.forEach(d => {\n    a = a.replace(/%[a-z]/, d);\n  });\n  return a;\n}\n/**\n * Create an error file out of errors.md for development and a simple web link to the full errors\n * in production mode.\n * @private\n */\n\n\nclass PolishedError extends Error {\n  constructor(code, ...args) {\n    if (process.env.NODE_ENV === 'production') {\n      super(`An error occurred. See https://github.com/styled-components/polished/blob/master/src/internalHelpers/errors.md#${code} for more information.`);\n    } else {\n      super(format(ERRORS[code], ...args));\n    }\n  }\n\n}\n\nconst unitRegExp = /((?!\\w)a|na|hc|mc|dg|me[r]?|xe|ni(?![a-zA-Z])|mm|cp|tp|xp|q(?!s)|hv|xamv|nimv|wv|sm|s(?!\\D|$)|ged|darg?|nrut)/g; // Merges additional math functionality into the defaults.\n\nfunction mergeSymbolMaps(additionalSymbols) {\n  const symbolMap = {};\n  symbolMap.symbols = additionalSymbols ? _extends({}, defaultMathSymbols.symbols, {}, additionalSymbols.symbols) : _extends({}, defaultMathSymbols.symbols);\n  return symbolMap;\n}\n\nfunction exec(operators, values) {\n  const op = operators.pop();\n  values.push(op.f(...[].concat(...values.splice(-op.argCount))));\n  return op.precedence;\n}\n\nfunction calculate(expression, additionalSymbols) {\n  const symbolMap = mergeSymbolMaps(additionalSymbols);\n  let match;\n  const operators = [symbolMap.symbols['('].prefix];\n  const values = [];\n  const pattern = new RegExp( // Pattern for numbers\n  `\\\\d+(?:\\\\.\\\\d+)?|${// ...and patterns for individual operators/function names\n  Object.keys(symbolMap.symbols).map(key => symbolMap.symbols[key]) // longer symbols should be listed first\n  // $FlowFixMe\n  .sort((a, b) => b.symbol.length - a.symbol.length) // $FlowFixMe\n  .map(val => val.regSymbol).join('|')}|(\\\\S)`, 'g');\n  pattern.lastIndex = 0; // Reset regular expression object\n\n  let afterValue = false;\n\n  do {\n    match = pattern.exec(expression);\n    const [token, bad] = match || [')', undefined];\n    const notNumber = symbolMap.symbols[token];\n    const notNewValue = notNumber && !notNumber.prefix && !notNumber.func;\n    const notAfterValue = !notNumber || !notNumber.postfix && !notNumber.infix; // Check for syntax errors:\n\n    if (bad || (afterValue ? notAfterValue : notNewValue)) {\n      throw new PolishedError(37, match ? match.index : expression.length, expression);\n    }\n\n    if (afterValue) {\n      // We either have an infix or postfix operator (they should be mutually exclusive)\n      const curr = notNumber.postfix || notNumber.infix;\n\n      do {\n        const prev = operators[operators.length - 1];\n        if ((curr.precedence - prev.precedence || prev.rightToLeft) > 0) break; // Apply previous operator, since it has precedence over current one\n      } while (exec(operators, values)); // Exit loop after executing an opening parenthesis or function\n\n\n      afterValue = curr.notation === 'postfix';\n\n      if (curr.symbol !== ')') {\n        operators.push(curr); // Postfix always has precedence over any operator that follows after it\n\n        if (afterValue) exec(operators, values);\n      }\n    } else if (notNumber) {\n      // prefix operator or function\n      operators.push(notNumber.prefix || notNumber.func);\n\n      if (notNumber.func) {\n        // Require an opening parenthesis\n        match = pattern.exec(expression);\n\n        if (!match || match[0] !== '(') {\n          throw new PolishedError(38, match ? match.index : expression.length, expression);\n        }\n      }\n    } else {\n      // number\n      values.push(+token);\n      afterValue = true;\n    }\n  } while (match && operators.length);\n\n  if (operators.length) {\n    throw new PolishedError(39, match ? match.index : expression.length, expression);\n  } else if (match) {\n    throw new PolishedError(40, match ? match.index : expression.length, expression);\n  } else {\n    return values.pop();\n  }\n}\n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\n/**\n * Helper for doing math with CSS Units. Accepts a formula as a string. All values in the formula must have the same unit (or be unitless). Supports complex formulas utliziing addition, subtraction, multiplication, division, square root, powers, factorial, min, max, as well as parentheses for order of operation.\n *\n *In cases where you need to do calculations with mixed units where one unit is a [relative length unit](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units), you will want to use [CSS Calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc).\n *\n * *warning* While we've done everything possible to ensure math safely evalutes formulas expressed as strings, you should always use extreme caution when passing `math` user provided values.\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: math('12rem + 8rem'),\n *   fontSize: math('(12px + 2px) * 3'),\n *   fontSize: math('3px^2 + sqrt(4)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${math('12rem + 8rem')};\n *   fontSize: ${math('(12px + 2px) * 3')};\n *   fontSize: ${math('3px^2 + sqrt(4)')};\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   fontSize: '20rem',\n *   fontSize: '42px',\n *   fontSize: '11px',\n * }\n */\n\n\nfunction math(formula, additionalSymbols) {\n  const reversedFormula = reverseString(formula);\n  const formulaMatch = reversedFormula.match(unitRegExp); // Check that all units are the same\n\n  if (formulaMatch && !formulaMatch.every(unit => unit === formulaMatch[0])) {\n    throw new PolishedError(41);\n  }\n\n  const cleanFormula = reverseString(reversedFormula.replace(unitRegExp, ''));\n  return `${calculate(cleanFormula, additionalSymbols)}${formulaMatch ? reverseString(formulaMatch[0]) : ''}`;\n}\n\nconst cssVariableRegex = /--[\\S]*/g;\n/**\n * Fetches the value of a passed CSS Variable.\n *\n * Passthrough can be enabled (off by default) for when you are unsure of the input and want non-variable values to be returned instead of an error.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'background': cssVar('--background-color'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${cssVar('--background-color')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'background': 'red'\n * }\n */\n\nfunction cssVar(cssVariable, passThrough) {\n  if (!cssVariable || !cssVariable.match(cssVariableRegex)) {\n    if (passThrough) return cssVariable;\n    throw new PolishedError(73);\n  }\n\n  let variableValue;\n  /* eslint-disable */\n\n  /* istanbul ignore next */\n\n  if (document.documentElement !== null) {\n    variableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);\n  }\n  /* eslint-enable */\n\n\n  if (variableValue) {\n    return variableValue.trim();\n  } else {\n    throw new PolishedError(74);\n  }\n} // @private\n\n\nfunction capitalizeString(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst positionMap = ['Top', 'Right', 'Bottom', 'Left'];\n\nfunction generateProperty(property, position) {\n  if (!property) return position.toLowerCase();\n  const splitProperty = property.split('-');\n\n  if (splitProperty.length > 1) {\n    splitProperty.splice(1, 0, position);\n    return splitProperty.reduce((acc, val) => `${acc}${capitalizeString(val)}`);\n  }\n\n  const joinedProperty = property.replace(/([a-z])([A-Z])/g, `$1${position}$2`);\n  return property === joinedProperty ? `${property}${position}` : joinedProperty;\n}\n\nfunction generateStyles(property, valuesWithDefaults) {\n  const styles = {};\n\n  for (let i = 0; i < valuesWithDefaults.length; i += 1) {\n    if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {\n      styles[generateProperty(property, positionMap[i])] = valuesWithDefaults[i];\n    }\n  }\n\n  return styles;\n}\n/**\n * Enables shorthand for direction-based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\n\n\nfunction directionalProperty(property, ...values) {\n  //  prettier-ignore\n  const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values;\n  const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];\n  return generateStyles(property, valuesWithDefaults);\n}\n/**\n * Check if a string ends with something\n * @private\n */\n\n\nfunction endsWith(string, suffix) {\n  return string.substr(-suffix.length) === suffix;\n}\n\nconst cssRegex = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value minus its unit of measure.\n *\n * @deprecated - stripUnit's unitReturn functionality has been marked for deprecation in polished 4.0. It's functionality has been been moved to getValueAndUnit.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': stripUnit('100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${stripUnit('100px')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100\n * }\n */\n\nfunction stripUnit(value, unitReturn) {\n  if (typeof value !== 'string') return unitReturn ? [value, undefined] : value;\n  const matchedValue = value.match(cssRegex);\n\n  if (unitReturn) {\n    // eslint-disable-next-line no-console\n    console.warn(\"stripUnit's unitReturn functionality has been marked for deprecation in polished 4.0. It's functionality has been been moved to getValueAndUnit.\");\n    if (matchedValue) return [parseFloat(value), matchedValue[2]];\n    return [value, undefined];\n  }\n\n  if (matchedValue) return parseFloat(value);\n  return value;\n}\n/**\n * Factory function that creates pixel-to-x converters\n * @private\n */\n\n\nconst pxtoFactory = to => (pxval, base = '16px') => {\n  let newPxval = pxval;\n  let newBase = base;\n\n  if (typeof pxval === 'string') {\n    if (!endsWith(pxval, 'px')) {\n      throw new PolishedError(69, to, pxval);\n    }\n\n    newPxval = stripUnit(pxval);\n  }\n\n  if (typeof base === 'string') {\n    if (!endsWith(base, 'px')) {\n      throw new PolishedError(70, to, base);\n    }\n\n    newBase = stripUnit(base);\n  }\n\n  if (typeof newPxval === 'string') {\n    throw new PolishedError(71, pxval, to);\n  }\n\n  if (typeof newBase === 'string') {\n    throw new PolishedError(72, base, to);\n  }\n\n  return `${newPxval / newBase}${to}`;\n};\n/**\n * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': em('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${em('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1em'\n * }\n */\n\n\nconst em = /*#__PURE__*/pxtoFactory('em');\nconst cssRegex$1 = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value and its unit as elements of an array.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': getValueAndUnit('100px')[0],\n *   '--unit': getValueAndUnit('100px')[1],\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${getValueAndUnit('100px')[0]};\n *   --unit: ${getValueAndUnit('100px')[1]};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100,\n *   '--unit': 'px',\n * }\n */\n\nfunction getValueAndUnit(value) {\n  if (typeof value !== 'string') return [value, ''];\n  const matchedValue = value.match(cssRegex$1);\n  if (matchedValue) return [parseFloat(value), matchedValue[2]];\n  return [value, undefined];\n}\n\nconst ratioNames = {\n  minorSecond: 1.067,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 1.333,\n  augFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.618,\n  majorSixth: 1.667,\n  minorSeventh: 1.778,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 2.667,\n  majorTwelfth: 3,\n  doubleOctave: 4\n};\n\nfunction getRatio(ratioName) {\n  return ratioNames[ratioName];\n}\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing an em or rem value up or down a defined scale. We provide a list of commonly used scales as pre-defined variables.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'fontSize': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   fontSize: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'fontSize': '1.77689em'\n * }\n */\n\n\nfunction modularScale(steps, base = '1em', ratio = 1.333) {\n  if (typeof steps !== 'number') {\n    throw new PolishedError(42);\n  }\n\n  if (typeof ratio === 'string' && !ratioNames[ratio]) {\n    throw new PolishedError(43);\n  }\n\n  const [realBase, unit] = typeof base === 'string' ? getValueAndUnit(base) : [base, ''];\n  const realRatio = typeof ratio === 'string' ? getRatio(ratio) : ratio;\n\n  if (typeof realBase === 'string') {\n    throw new PolishedError(44, base);\n  }\n\n  return `${realBase * realRatio ** steps}${unit || ''}`;\n}\n/**\n * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': rem('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${rem('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1rem'\n * }\n */\n\n\nconst rem = /*#__PURE__*/pxtoFactory('rem');\n/**\n * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: between('20px', '100px', '400px', '1000px'),\n *   fontSize: between('20px', '100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${between('20px', '100px', '400px', '1000px')};\n *   fontSize: ${between('20px', '100px')}\n * `\n *\n * // CSS as JS Output\n *\n * h1: {\n *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',\n *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'\n * }\n */\n\nfunction between(fromSize, toSize, minScreen = '320px', maxScreen = '1200px') {\n  const [unitlessFromSize, fromSizeUnit] = getValueAndUnit(fromSize);\n  const [unitlessToSize, toSizeUnit] = getValueAndUnit(toSize);\n  const [unitlessMinScreen, minScreenUnit] = getValueAndUnit(minScreen);\n  const [unitlessMaxScreen, maxScreenUnit] = getValueAndUnit(maxScreen);\n\n  if (typeof unitlessMinScreen !== 'number' || typeof unitlessMaxScreen !== 'number' || !minScreenUnit || !maxScreenUnit || minScreenUnit !== maxScreenUnit) {\n    throw new PolishedError(47);\n  }\n\n  if (typeof unitlessFromSize !== 'number' || typeof unitlessToSize !== 'number' || fromSizeUnit !== toSizeUnit) {\n    throw new PolishedError(48);\n  }\n\n  const slope = (unitlessFromSize - unitlessToSize) / (unitlessMinScreen - unitlessMaxScreen);\n  const base = unitlessToSize - slope * unitlessMaxScreen;\n  return `calc(${base.toFixed(2)}${fromSizeUnit || ''} + ${(100 * slope).toFixed(2)}vw)`;\n}\n/**\n * CSS to contain a float (credit to CSSMojo).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...clearFix(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${clearFix()}\n * `\n *\n * // CSS as JS Output\n *\n * '&::after': {\n *   'clear': 'both',\n *   'content': '\"\"',\n *   'display': 'table'\n * }\n */\n\n\nfunction clearFix(parent = '&') {\n  const pseudoSelector = `${parent}::after`;\n  return {\n    [pseudoSelector]: {\n      clear: 'both',\n      content: '\"\"',\n      display: 'table'\n    }\n  };\n}\n/**\n * CSS to fully cover an area. Can optionally be passed an offset to act as a \"padding\".\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...cover()\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${cover()}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'position': 'absolute',\n *   'top': '0',\n *   'right: '0',\n *   'bottom': '0',\n *   'left: '0'\n * }\n */\n\n\nfunction cover(offset = 0) {\n  return {\n    position: 'absolute',\n    top: offset,\n    right: offset,\n    bottom: offset,\n    left: offset\n  };\n}\n/**\n * CSS to represent truncated text with an ellipsis.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis('250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis('250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'maxWidth': '250px',\n *   'overflow': 'hidden',\n *   'textOverflow': 'ellipsis',\n *   'whiteSpace': 'nowrap',\n *   'wordWrap': 'normal'\n * }\n */\n\n\nfunction ellipsis(width = '100%') {\n  return {\n    display: 'inline-block',\n    maxWidth: width,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal'\n  };\n}\n/**\n * Returns a set of media queries that resizes a property (or set of properties) between a provided fromSize and toSize. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px') to constrain the interpolation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...fluidRange(\n *    {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${fluidRange(\n *      {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   \"@media (min-width: 1000px)\": Object {\n *     \"padding\": \"100px\",\n *   },\n *   \"@media (min-width: 400px)\": Object {\n *     \"padding\": \"calc(-33.33333333333334px + 13.333333333333334vw)\",\n *   },\n *   \"padding\": \"20px\",\n * }\n */\n\n\nfunction fluidRange(cssProp, minScreen = '320px', maxScreen = '1200px') {\n  if (!Array.isArray(cssProp) && typeof cssProp !== 'object' || cssProp === null) {\n    throw new PolishedError(49);\n  }\n\n  if (Array.isArray(cssProp)) {\n    const mediaQueries = {};\n    const fallbacks = {};\n\n    for (const obj of cssProp) {\n      if (!obj.prop || !obj.fromSize || !obj.toSize) {\n        throw new PolishedError(50);\n      }\n\n      fallbacks[obj.prop] = obj.fromSize;\n      mediaQueries[`@media (min-width: ${minScreen})`] = _extends({}, mediaQueries[`@media (min-width: ${minScreen})`], {\n        [obj.prop]: between(obj.fromSize, obj.toSize, minScreen, maxScreen)\n      });\n      mediaQueries[`@media (min-width: ${maxScreen})`] = _extends({}, mediaQueries[`@media (min-width: ${maxScreen})`], {\n        [obj.prop]: obj.toSize\n      });\n    }\n\n    return _extends({}, fallbacks, {}, mediaQueries);\n  } else {\n    if (!cssProp.prop || !cssProp.fromSize || !cssProp.toSize) {\n      throw new PolishedError(51);\n    }\n\n    return {\n      [cssProp.prop]: cssProp.fromSize,\n      [`@media (min-width: ${minScreen})`]: {\n        [cssProp.prop]: between(cssProp.fromSize, cssProp.toSize, minScreen, maxScreen)\n      },\n      [`@media (min-width: ${maxScreen})`]: {\n        [cssProp.prop]: cssProp.toSize\n      }\n    };\n  }\n}\n\nconst dataURIRegex = /^\\s*data:([a-z]+\\/[a-z-]+(;[a-z-]+=[a-z-]+)?)?(;charset=[a-z0-9-]+)?(;base64)?,[a-z0-9!$&',()*+,;=\\-._~:@/?%\\s]*\\s*$/i;\nconst formatHintMap = {\n  woff: 'woff',\n  woff2: 'woff2',\n  ttf: 'truetype',\n  otf: 'opentype',\n  eot: 'embedded-opentype',\n  svg: 'svg',\n  svgz: 'svg'\n};\n\nfunction generateFormatHint(format, formatHint) {\n  if (!formatHint) return '';\n  return ` format(\"${formatHintMap[format]}\")`;\n}\n\nfunction isDataURI(fontFilePath) {\n  return !!fontFilePath.match(dataURIRegex);\n}\n\nfunction generateFileReferences(fontFilePath, fileFormats, formatHint) {\n  if (isDataURI(fontFilePath)) {\n    return `url(\"${fontFilePath}\")${generateFormatHint(fileFormats[0], formatHint)}`;\n  }\n\n  const fileFontReferences = fileFormats.map(format => `url(\"${fontFilePath}.${format}\")${generateFormatHint(format, formatHint)}`);\n  return fileFontReferences.join(', ');\n}\n\nfunction generateLocalReferences(localFonts) {\n  const localFontReferences = localFonts.map(font => `local(\"${font}\")`);\n  return localFontReferences.join(', ');\n}\n\nfunction generateSources(fontFilePath, localFonts, fileFormats, formatHint) {\n  const fontReferences = [];\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\n\n  if (fontFilePath) {\n    fontReferences.push(generateFileReferences(fontFilePath, fileFormats, formatHint));\n  }\n\n  return fontReferences.join(', ');\n}\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro',\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * const GlobalStyle = createGlobalStyle`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro',\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'fontFamily': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\n\nfunction fontFace({\n  fontFamily,\n  fontFilePath,\n  fontStretch,\n  fontStyle,\n  fontVariant,\n  fontWeight,\n  fileFormats = ['eot', 'woff2', 'woff', 'ttf', 'svg'],\n  formatHint = false,\n  localFonts,\n  unicodeRange,\n  fontDisplay,\n  fontVariationSettings,\n  fontFeatureSettings\n}) {\n  // Error Handling\n  if (!fontFamily) throw new PolishedError(55);\n\n  if (!fontFilePath && !localFonts) {\n    throw new PolishedError(52);\n  }\n\n  if (localFonts && !Array.isArray(localFonts)) {\n    throw new PolishedError(53);\n  }\n\n  if (!Array.isArray(fileFormats)) {\n    throw new PolishedError(54);\n  }\n\n  const fontFaceDeclaration = {\n    '@font-face': {\n      fontFamily,\n      src: generateSources(fontFilePath, localFonts, fileFormats, formatHint),\n      unicodeRange,\n      fontStretch,\n      fontStyle,\n      fontVariant,\n      fontWeight,\n      fontDisplay,\n      fontVariationSettings,\n      fontFeatureSettings\n    }\n  }; // Removes undefined fields for cleaner css object.\n\n  return JSON.parse(JSON.stringify(fontFaceDeclaration));\n}\n/**\n * CSS to hide text to show a background image in a SEO-friendly way.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'backgroundImage': 'url(logo.png)',\n *   ...hideText(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   backgroundImage: url(logo.png);\n *   ${hideText()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'backgroundImage': 'url(logo.png)',\n *   'textIndent': '101%',\n *   'overflow': 'hidden',\n *   'whiteSpace': 'nowrap',\n * }\n */\n\n\nfunction hideText() {\n  return {\n    textIndent: '101%',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  };\n}\n/**\n * CSS to hide content visually but remain accessible to screen readers.\n * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...hideVisually(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hideVisually()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'border': '0',\n *   'clip': 'rect(0 0 0 0)',\n *   'height': '1px',\n *   'margin': '-1px',\n *   'overflow': 'hidden',\n *   'padding': '0',\n *   'position': 'absolute',\n *   'whiteSpace': 'nowrap',\n *   'width': '1px',\n * }\n */\n\n\nfunction hideVisually() {\n  return {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    whiteSpace: 'nowrap',\n    width: '1px'\n  };\n}\n/**\n * Generates a media query to target HiDPI devices.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  [hiDPI(1.5)]: {\n *    width: 200px;\n *  }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hiDPI(1.5)} {\n *     width: 200px;\n *   }\n * `\n *\n * // CSS as JS Output\n *\n * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n *  only screen and (min--moz-device-pixel-ratio: 1.5),\n *  only screen and (-o-min-device-pixel-ratio: 1.5/1),\n *  only screen and (min-resolution: 144dpi),\n *  only screen and (min-resolution: 1.5dppx)': {\n *   'width': '200px',\n * }\n */\n\n\nfunction hiDPI(ratio = 1.3) {\n  return `\n    @media only screen and (-webkit-min-device-pixel-ratio: ${ratio}),\n    only screen and (min--moz-device-pixel-ratio: ${ratio}),\n    only screen and (-o-min-device-pixel-ratio: ${ratio}/1),\n    only screen and (min-resolution: ${Math.round(ratio * 96)}dpi),\n    only screen and (min-resolution: ${ratio}dppx)\n  `;\n}\n\nfunction constructGradientValue(literals, ...substitutions) {\n  let template = '';\n\n  for (let i = 0; i < literals.length; i += 1) {\n    template += literals[i];\n\n    if (i === substitutions.length - 1 && substitutions[i]) {\n      const definedValues = substitutions.filter(substitute => !!substitute); // Adds leading coma if properties preceed color-stops\n\n      if (definedValues.length > 1) {\n        template = template.slice(0, -1);\n        template += `, ${substitutions[i]}`; // No trailing space if color-stops is the only param provided\n      } else if (definedValues.length === 1) {\n        template += `${substitutions[i]}`;\n      }\n    } else if (substitutions[i]) {\n      template += `${substitutions[i]} `;\n    }\n  }\n\n  return template.trim();\n}\n\nlet _ = t => t,\n    _t;\n/**\n * CSS for declaring a linear gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#FFF',\n *   'backgroundImage': 'linear-gradient(to top right, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\n\n\nfunction linearGradient({\n  colorStops,\n  fallback,\n  toDirection = ''\n}) {\n  if (!colorStops || colorStops.length < 2) {\n    throw new PolishedError(56);\n  }\n\n  return {\n    backgroundColor: fallback || colorStops[0].split(' ')[0],\n    backgroundImage: constructGradientValue(_t || (_t = _`linear-gradient(${0}${0})`), toDirection, colorStops.join(', '))\n  };\n}\n/**\n * CSS to normalize abnormalities across browsers (normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...normalize(),\n * }\n *\n * // styled-components usage\n * const GlobalStyle = createGlobalStyle`${normalize()}`\n *\n * // CSS as JS Output\n *\n * html {\n *   lineHeight: 1.15,\n *   textSizeAdjust: 100%,\n * } ...\n */\n\n\nfunction normalize() {\n  return [{\n    html: {\n      lineHeight: '1.15',\n      textSizeAdjust: '100%'\n    },\n    body: {\n      margin: '0'\n    },\n    h1: {\n      fontSize: '2em',\n      margin: '0.67em 0'\n    },\n    hr: {\n      boxSizing: 'content-box',\n      height: '0',\n      overflow: 'visible'\n    },\n    pre: {\n      fontFamily: 'monospace, monospace',\n      fontSize: '1em'\n    },\n    a: {\n      backgroundColor: 'transparent'\n    },\n    'abbr[title]': {\n      borderBottom: 'none',\n      textDecoration: 'underline'\n    },\n    [`b,\n    strong`]: {\n      fontWeight: 'bolder'\n    },\n    [`code,\n    kbd,\n    samp`]: {\n      fontFamily: 'monospace, monospace',\n      fontSize: '1em'\n    },\n    small: {\n      fontSize: '80%'\n    },\n    [`sub,\n    sup`]: {\n      fontSize: '75%',\n      lineHeight: '0',\n      position: 'relative',\n      verticalAlign: 'baseline'\n    },\n    sub: {\n      bottom: '-0.25em'\n    },\n    sup: {\n      top: '-0.5em'\n    },\n    img: {\n      borderStyle: 'none'\n    },\n    [`button,\n    input,\n    optgroup,\n    select,\n    textarea`]: {\n      fontFamily: 'inherit',\n      fontSize: '100%',\n      lineHeight: '1.15',\n      margin: '0'\n    },\n    [`button,\n    input`]: {\n      overflow: 'visible'\n    },\n    [`button,\n    select`]: {\n      textTransform: 'none'\n    },\n    [`button,\n    html [type=\"button\"],\n    [type=\"reset\"],\n    [type=\"submit\"]`]: {\n      WebkitAppearance: 'button'\n    },\n    [`button::-moz-focus-inner,\n    [type=\"button\"]::-moz-focus-inner,\n    [type=\"reset\"]::-moz-focus-inner,\n    [type=\"submit\"]::-moz-focus-inner`]: {\n      borderStyle: 'none',\n      padding: '0'\n    },\n    [`button:-moz-focusring,\n    [type=\"button\"]:-moz-focusring,\n    [type=\"reset\"]:-moz-focusring,\n    [type=\"submit\"]:-moz-focusring`]: {\n      outline: '1px dotted ButtonText'\n    },\n    fieldset: {\n      padding: '0.35em 0.625em 0.75em'\n    },\n    legend: {\n      boxSizing: 'border-box',\n      color: 'inherit',\n      display: 'table',\n      maxWidth: '100%',\n      padding: '0',\n      whiteSpace: 'normal'\n    },\n    progress: {\n      verticalAlign: 'baseline'\n    },\n    textarea: {\n      overflow: 'auto'\n    },\n    [`[type=\"checkbox\"],\n    [type=\"radio\"]`]: {\n      boxSizing: 'border-box',\n      padding: '0'\n    },\n    [`[type=\"number\"]::-webkit-inner-spin-button,\n    [type=\"number\"]::-webkit-outer-spin-button`]: {\n      height: 'auto'\n    },\n    '[type=\"search\"]': {\n      WebkitAppearance: 'textfield',\n      outlineOffset: '-2px'\n    },\n    '[type=\"search\"]::-webkit-search-decoration': {\n      WebkitAppearance: 'none'\n    },\n    '::-webkit-file-upload-button': {\n      WebkitAppearance: 'button',\n      font: 'inherit'\n    },\n    details: {\n      display: 'block'\n    },\n    summary: {\n      display: 'list-item'\n    },\n    template: {\n      display: 'none'\n    },\n    '[hidden]': {\n      display: 'none'\n    }\n  }, {\n    'abbr[title]': {\n      textDecoration: 'underline dotted'\n    }\n  }];\n}\n\nlet _$1 = t => t,\n    _t$1;\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#00FFFF',\n *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\n\n\nfunction radialGradient({\n  colorStops,\n  extent = '',\n  fallback,\n  position = '',\n  shape = ''\n}) {\n  if (!colorStops || colorStops.length < 2) {\n    throw new PolishedError(57);\n  }\n\n  return {\n    backgroundColor: fallback || colorStops[0].split(' ')[0],\n    backgroundImage: constructGradientValue(_t$1 || (_t$1 = _$1`radial-gradient(${0}${0}${0}${0})`), position, shape, extent, colorStops.join(', '))\n  };\n}\n/**\n * A helper to generate a retina background image and non-retina\n * background image. The retina background image will output to a HiDPI media query. The mixin uses\n * a _2x.png filename suffix by default.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  ...retinaImage('my-img')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${retinaImage('my-img')}\n * `\n *\n * // CSS as JS Output\n * div {\n *   backgroundImage: 'url(my-img.png)',\n *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n *    only screen and (min--moz-device-pixel-ratio: 1.3),\n *    only screen and (-o-min-device-pixel-ratio: 1.3/1),\n *    only screen and (min-resolution: 144dpi),\n *    only screen and (min-resolution: 1.5dppx)': {\n *     backgroundImage: 'url(my-img_2x.png)',\n *   }\n * }\n */\n\n\nfunction retinaImage(filename, backgroundSize, extension = 'png', retinaFilename, retinaSuffix = '_2x') {\n  if (!filename) {\n    throw new PolishedError(58);\n  } // Replace the dot at the beginning of the passed extension if one exists\n\n\n  const ext = extension.replace(/^\\./, '');\n  const rFilename = retinaFilename ? `${retinaFilename}.${ext}` : `${filename}${retinaSuffix}.${ext}`;\n  return {\n    backgroundImage: `url(${filename}.${ext})`,\n    [hiDPI()]: _extends({\n      backgroundImage: `url(${rFilename})`\n    }, backgroundSize ? {\n      backgroundSize\n    } : {})\n  };\n}\n/* eslint-disable key-spacing */\n\n\nconst functionsMap = {\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n  easeInCirc: 'cubic-bezier(0.600,  0.040, 0.980, 0.335)',\n  easeInCubic: 'cubic-bezier(0.550,  0.055, 0.675, 0.190)',\n  easeInExpo: 'cubic-bezier(0.950,  0.050, 0.795, 0.035)',\n  easeInQuad: 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n  easeInQuart: 'cubic-bezier(0.895,  0.030, 0.685, 0.220)',\n  easeInQuint: 'cubic-bezier(0.755,  0.050, 0.855, 0.060)',\n  easeInSine: 'cubic-bezier(0.470,  0.000, 0.745, 0.715)',\n  easeOutBack: 'cubic-bezier(0.175,  0.885, 0.320, 1.275)',\n  easeOutCubic: 'cubic-bezier(0.215,  0.610, 0.355, 1.000)',\n  easeOutCirc: 'cubic-bezier(0.075,  0.820, 0.165, 1.000)',\n  easeOutExpo: 'cubic-bezier(0.190,  1.000, 0.220, 1.000)',\n  easeOutQuad: 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n  easeOutQuart: 'cubic-bezier(0.165,  0.840, 0.440, 1.000)',\n  easeOutQuint: 'cubic-bezier(0.230,  1.000, 0.320, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390,  0.575, 0.565, 1.000)',\n  easeInOutBack: 'cubic-bezier(0.680, -0.550, 0.265, 1.550)',\n  easeInOutCirc: 'cubic-bezier(0.785,  0.135, 0.150, 0.860)',\n  easeInOutCubic: 'cubic-bezier(0.645,  0.045, 0.355, 1.000)',\n  easeInOutExpo: 'cubic-bezier(1.000,  0.000, 0.000, 1.000)',\n  easeInOutQuad: 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n  easeInOutQuart: 'cubic-bezier(0.770,  0.000, 0.175, 1.000)',\n  easeInOutQuint: 'cubic-bezier(0.860,  0.000, 0.070, 1.000)',\n  easeInOutSine: 'cubic-bezier(0.445,  0.050, 0.550, 0.950)'\n};\n/* eslint-enable key-spacing */\n\nfunction getTimingFunction(functionName) {\n  return functionsMap[functionName];\n}\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */\n\n\nfunction timingFunctions(timingFunction) {\n  return getTimingFunction(timingFunction);\n}\n\nconst getBorderWidth = (pointingDirection, height, width) => {\n  const fullWidth = `${width[0]}${width[1] || ''}`;\n  const halfWidth = `${width[0] / 2}${width[1] || ''}`;\n  const fullHeight = `${height[0]}${height[1] || ''}`;\n  const halfHeight = `${height[0] / 2}${height[1] || ''}`;\n\n  switch (pointingDirection) {\n    case 'top':\n      return `0 ${halfWidth} ${fullHeight} ${halfWidth}`;\n\n    case 'topLeft':\n      return `${fullWidth} ${fullHeight} 0 0`;\n\n    case 'left':\n      return `${halfHeight} ${fullWidth} ${halfHeight} 0`;\n\n    case 'bottomLeft':\n      return `${fullWidth} 0 0 ${fullHeight}`;\n\n    case 'bottom':\n      return `${fullHeight} ${halfWidth} 0 ${halfWidth}`;\n\n    case 'bottomRight':\n      return `0 0 ${fullWidth} ${fullHeight}`;\n\n    case 'right':\n      return `${halfHeight} 0 ${halfHeight} ${fullWidth}`;\n\n    case 'topRight':\n    default:\n      return `0 ${fullWidth} ${fullHeight} 0`;\n  }\n};\n\nconst getBorderColor = (pointingDirection, foregroundColor, backgroundColor) => {\n  switch (pointingDirection) {\n    case 'top':\n    case 'bottomRight':\n      return `${backgroundColor} ${backgroundColor} ${foregroundColor} ${backgroundColor}`;\n\n    case 'right':\n    case 'bottomLeft':\n      return `${backgroundColor} ${backgroundColor} ${backgroundColor} ${foregroundColor}`;\n\n    case 'bottom':\n    case 'topLeft':\n      return `${foregroundColor} ${backgroundColor} ${backgroundColor} ${backgroundColor}`;\n\n    case 'left':\n    case 'topRight':\n      return `${backgroundColor} ${foregroundColor} ${backgroundColor} ${backgroundColor}`;\n\n    default:\n      throw new PolishedError(59);\n  }\n};\n/**\n * CSS to represent triangle with any pointing direction with an optional background color.\n *\n * @example\n * // Styles as object usage\n *\n * const styles = {\n *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })\n * }\n *\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *  'borderColor': 'transparent transparent transparent red',\n *  'borderStyle': 'solid',\n *  'borderWidth': '50px 0 50px 100px',\n *  'height': '0',\n *  'width': '0',\n * }\n */\n\n\nfunction triangle({\n  pointingDirection,\n  height,\n  width,\n  foregroundColor,\n  backgroundColor = 'transparent'\n}) {\n  const widthAndUnit = getValueAndUnit(width);\n  const heightAndUnit = getValueAndUnit(height);\n\n  if (isNaN(heightAndUnit[0]) || isNaN(widthAndUnit[0])) {\n    throw new PolishedError(60);\n  }\n\n  return {\n    width: '0',\n    height: '0',\n    borderColor: getBorderColor(pointingDirection, foregroundColor, backgroundColor),\n    borderStyle: 'solid',\n    borderWidth: getBorderWidth(pointingDirection, heightAndUnit, widthAndUnit)\n  };\n}\n/**\n * Provides an easy way to change the `wordWrap` property.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...wordWrap('break-word')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${wordWrap('break-word')}\n * `\n *\n * // CSS as JS Output\n *\n * const styles = {\n *   overflowWrap: 'break-word',\n *   wordWrap: 'break-word',\n *   wordBreak: 'break-all',\n * }\n */\n\n\nfunction wordWrap(wrap = 'break-word') {\n  const wordBreak = wrap === 'break-word' ? 'break-all' : wrap;\n  return {\n    overflowWrap: wrap,\n    wordWrap: wrap,\n    wordBreak\n  };\n}\n\nfunction colorToInt(color) {\n  return Math.round(color * 255);\n}\n\nfunction convertToInt(red, green, blue) {\n  return `${colorToInt(red)},${colorToInt(green)},${colorToInt(blue)}`;\n}\n\nfunction hslToRgb(hue, saturation, lightness, convert = convertToInt) {\n  if (saturation === 0) {\n    // achromatic\n    return convert(lightness, lightness, lightness);\n  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n\n\n  const huePrime = (hue % 360 + 360) % 360 / 60;\n  const chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;\n  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = lightness - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n  return convert(finalRed, finalGreen, finalBlue);\n}\n\nconst namedColorMap = {\n  aliceblue: 'f0f8ff',\n  antiquewhite: 'faebd7',\n  aqua: '00ffff',\n  aquamarine: '7fffd4',\n  azure: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '000',\n  blanchedalmond: 'ffebcd',\n  blue: '0000ff',\n  blueviolet: '8a2be2',\n  brown: 'a52a2a',\n  burlywood: 'deb887',\n  cadetblue: '5f9ea0',\n  chartreuse: '7fff00',\n  chocolate: 'd2691e',\n  coral: 'ff7f50',\n  cornflowerblue: '6495ed',\n  cornsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: '00ffff',\n  darkblue: '00008b',\n  darkcyan: '008b8b',\n  darkgoldenrod: 'b8860b',\n  darkgray: 'a9a9a9',\n  darkgreen: '006400',\n  darkgrey: 'a9a9a9',\n  darkkhaki: 'bdb76b',\n  darkmagenta: '8b008b',\n  darkolivegreen: '556b2f',\n  darkorange: 'ff8c00',\n  darkorchid: '9932cc',\n  darkred: '8b0000',\n  darksalmon: 'e9967a',\n  darkseagreen: '8fbc8f',\n  darkslateblue: '483d8b',\n  darkslategray: '2f4f4f',\n  darkslategrey: '2f4f4f',\n  darkturquoise: '00ced1',\n  darkviolet: '9400d3',\n  deeppink: 'ff1493',\n  deepskyblue: '00bfff',\n  dimgray: '696969',\n  dimgrey: '696969',\n  dodgerblue: '1e90ff',\n  firebrick: 'b22222',\n  floralwhite: 'fffaf0',\n  forestgreen: '228b22',\n  fuchsia: 'ff00ff',\n  gainsboro: 'dcdcdc',\n  ghostwhite: 'f8f8ff',\n  gold: 'ffd700',\n  goldenrod: 'daa520',\n  gray: '808080',\n  green: '008000',\n  greenyellow: 'adff2f',\n  grey: '808080',\n  honeydew: 'f0fff0',\n  hotpink: 'ff69b4',\n  indianred: 'cd5c5c',\n  indigo: '4b0082',\n  ivory: 'fffff0',\n  khaki: 'f0e68c',\n  lavender: 'e6e6fa',\n  lavenderblush: 'fff0f5',\n  lawngreen: '7cfc00',\n  lemonchiffon: 'fffacd',\n  lightblue: 'add8e6',\n  lightcoral: 'f08080',\n  lightcyan: 'e0ffff',\n  lightgoldenrodyellow: 'fafad2',\n  lightgray: 'd3d3d3',\n  lightgreen: '90ee90',\n  lightgrey: 'd3d3d3',\n  lightpink: 'ffb6c1',\n  lightsalmon: 'ffa07a',\n  lightseagreen: '20b2aa',\n  lightskyblue: '87cefa',\n  lightslategray: '789',\n  lightslategrey: '789',\n  lightsteelblue: 'b0c4de',\n  lightyellow: 'ffffe0',\n  lime: '0f0',\n  limegreen: '32cd32',\n  linen: 'faf0e6',\n  magenta: 'f0f',\n  maroon: '800000',\n  mediumaquamarine: '66cdaa',\n  mediumblue: '0000cd',\n  mediumorchid: 'ba55d3',\n  mediumpurple: '9370db',\n  mediumseagreen: '3cb371',\n  mediumslateblue: '7b68ee',\n  mediumspringgreen: '00fa9a',\n  mediumturquoise: '48d1cc',\n  mediumvioletred: 'c71585',\n  midnightblue: '191970',\n  mintcream: 'f5fffa',\n  mistyrose: 'ffe4e1',\n  moccasin: 'ffe4b5',\n  navajowhite: 'ffdead',\n  navy: '000080',\n  oldlace: 'fdf5e6',\n  olive: '808000',\n  olivedrab: '6b8e23',\n  orange: 'ffa500',\n  orangered: 'ff4500',\n  orchid: 'da70d6',\n  palegoldenrod: 'eee8aa',\n  palegreen: '98fb98',\n  paleturquoise: 'afeeee',\n  palevioletred: 'db7093',\n  papayawhip: 'ffefd5',\n  peachpuff: 'ffdab9',\n  peru: 'cd853f',\n  pink: 'ffc0cb',\n  plum: 'dda0dd',\n  powderblue: 'b0e0e6',\n  purple: '800080',\n  rebeccapurple: '639',\n  red: 'f00',\n  rosybrown: 'bc8f8f',\n  royalblue: '4169e1',\n  saddlebrown: '8b4513',\n  salmon: 'fa8072',\n  sandybrown: 'f4a460',\n  seagreen: '2e8b57',\n  seashell: 'fff5ee',\n  sienna: 'a0522d',\n  silver: 'c0c0c0',\n  skyblue: '87ceeb',\n  slateblue: '6a5acd',\n  slategray: '708090',\n  slategrey: '708090',\n  snow: 'fffafa',\n  springgreen: '00ff7f',\n  steelblue: '4682b4',\n  tan: 'd2b48c',\n  teal: '008080',\n  thistle: 'd8bfd8',\n  tomato: 'ff6347',\n  turquoise: '40e0d0',\n  violet: 'ee82ee',\n  wheat: 'f5deb3',\n  white: 'fff',\n  whitesmoke: 'f5f5f5',\n  yellow: 'ff0',\n  yellowgreen: '9acd32'\n};\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n * @private\n */\n\nfunction nameToHex(color) {\n  if (typeof color !== 'string') return color;\n  const normalizedColorName = color.toLowerCase();\n  return namedColorMap[normalizedColorName] ? `#${namedColorMap[normalizedColorName]}` : color;\n}\n\nconst hexRegex = /^#[a-fA-F0-9]{6}$/;\nconst hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;\nconst reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nconst reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;\nconst rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i;\nconst rgbaRegex = /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\nconst hslRegex = /^hsl\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*\\)$/i;\nconst hslaRegex = /^hsla\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = parseToRgb('rgb(255, 0, 0)');\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');\n */\n\nfunction parseToRgb(color) {\n  if (typeof color !== 'string') {\n    throw new PolishedError(3);\n  }\n\n  const normalizedColor = nameToHex(color);\n\n  if (normalizedColor.match(hexRegex)) {\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[2]}`, 16),\n      green: parseInt(`${normalizedColor[3]}${normalizedColor[4]}`, 16),\n      blue: parseInt(`${normalizedColor[5]}${normalizedColor[6]}`, 16)\n    };\n  }\n\n  if (normalizedColor.match(hexRgbaRegex)) {\n    const alpha = parseFloat((parseInt(`${normalizedColor[7]}${normalizedColor[8]}`, 16) / 255).toFixed(2));\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[2]}`, 16),\n      green: parseInt(`${normalizedColor[3]}${normalizedColor[4]}`, 16),\n      blue: parseInt(`${normalizedColor[5]}${normalizedColor[6]}`, 16),\n      alpha\n    };\n  }\n\n  if (normalizedColor.match(reducedHexRegex)) {\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[1]}`, 16),\n      green: parseInt(`${normalizedColor[2]}${normalizedColor[2]}`, 16),\n      blue: parseInt(`${normalizedColor[3]}${normalizedColor[3]}`, 16)\n    };\n  }\n\n  if (normalizedColor.match(reducedRgbaHexRegex)) {\n    const alpha = parseFloat((parseInt(`${normalizedColor[4]}${normalizedColor[4]}`, 16) / 255).toFixed(2));\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[1]}`, 16),\n      green: parseInt(`${normalizedColor[2]}${normalizedColor[2]}`, 16),\n      blue: parseInt(`${normalizedColor[3]}${normalizedColor[3]}`, 16),\n      alpha\n    };\n  }\n\n  const rgbMatched = rgbRegex.exec(normalizedColor);\n\n  if (rgbMatched) {\n    return {\n      red: parseInt(`${rgbMatched[1]}`, 10),\n      green: parseInt(`${rgbMatched[2]}`, 10),\n      blue: parseInt(`${rgbMatched[3]}`, 10)\n    };\n  }\n\n  const rgbaMatched = rgbaRegex.exec(normalizedColor);\n\n  if (rgbaMatched) {\n    return {\n      red: parseInt(`${rgbaMatched[1]}`, 10),\n      green: parseInt(`${rgbaMatched[2]}`, 10),\n      blue: parseInt(`${rgbaMatched[3]}`, 10),\n      alpha: parseFloat(`${rgbaMatched[4]}`)\n    };\n  }\n\n  const hslMatched = hslRegex.exec(normalizedColor);\n\n  if (hslMatched) {\n    const hue = parseInt(`${hslMatched[1]}`, 10);\n    const saturation = parseInt(`${hslMatched[2]}`, 10) / 100;\n    const lightness = parseInt(`${hslMatched[3]}`, 10) / 100;\n    const rgbColorString = `rgb(${hslToRgb(hue, saturation, lightness)})`;\n    const hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new PolishedError(4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(`${hslRgbMatched[1]}`, 10),\n      green: parseInt(`${hslRgbMatched[2]}`, 10),\n      blue: parseInt(`${hslRgbMatched[3]}`, 10)\n    };\n  }\n\n  const hslaMatched = hslaRegex.exec(normalizedColor);\n\n  if (hslaMatched) {\n    const hue = parseInt(`${hslaMatched[1]}`, 10);\n    const saturation = parseInt(`${hslaMatched[2]}`, 10) / 100;\n    const lightness = parseInt(`${hslaMatched[3]}`, 10) / 100;\n    const rgbColorString = `rgb(${hslToRgb(hue, saturation, lightness)})`;\n    const hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new PolishedError(4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(`${hslRgbMatched[1]}`, 10),\n      green: parseInt(`${hslRgbMatched[2]}`, 10),\n      blue: parseInt(`${hslRgbMatched[3]}`, 10),\n      alpha: parseFloat(`${hslaMatched[4]}`)\n    };\n  }\n\n  throw new PolishedError(5);\n}\n\nfunction rgbToHsl(color) {\n  // make sure rgb are contained in a set of [0, 255]\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  if (max === min) {\n    // achromatic\n    if (color.alpha !== undefined) {\n      return {\n        hue: 0,\n        saturation: 0,\n        lightness,\n        alpha: color.alpha\n      };\n    } else {\n      return {\n        hue: 0,\n        saturation: 0,\n        lightness\n      };\n    }\n  }\n\n  let hue;\n  const delta = max - min;\n  const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  switch (max) {\n    case red:\n      hue = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      hue = (blue - red) / delta + 2;\n      break;\n\n    default:\n      // blue case\n      hue = (red - green) / delta + 4;\n      break;\n  }\n\n  hue *= 60;\n\n  if (color.alpha !== undefined) {\n    return {\n      hue,\n      saturation,\n      lightness,\n      alpha: color.alpha\n    };\n  }\n\n  return {\n    hue,\n    saturation,\n    lightness\n  };\n}\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1\n * const color1 = parseToHsl('rgb(255, 0, 0)');\n * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2\n * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');\n */\n\n\nfunction parseToHsl(color) {\n  // Note: At a later stage we can optimize this function as right now a hsl\n  // color would be parsed converted to rgb values and converted back to hsl.\n  return rgbToHsl(parseToRgb(color));\n}\n/**\n * Reduces hex values if possible e.g. #ff8866 to #f86\n * @private\n */\n\n\nconst reduceHexValue = value => {\n  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {\n    return `#${value[1]}${value[3]}${value[5]}`;\n  }\n\n  return value;\n};\n\nfunction numberToHex(value) {\n  const hex = value.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction colorToHex(color) {\n  return numberToHex(Math.round(color * 255));\n}\n\nfunction convertToHex(red, green, blue) {\n  return reduceHexValue(`#${colorToHex(red)}${colorToHex(green)}${colorToHex(blue)}`);\n}\n\nfunction hslToHex(hue, saturation, lightness) {\n  return hslToRgb(hue, saturation, lightness, convertToHex);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsl(359, 0.75, 0.4),\n *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsl(359, 0.75, 0.4)};\n *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#b3191c\";\n *   background: \"#b3191c\";\n * }\n */\n\n\nfunction hsl(value, saturation, lightness) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number') {\n    return hslToHex(value, saturation, lightness);\n  } else if (typeof value === 'object' && saturation === undefined && lightness === undefined) {\n    return hslToHex(value.hue, value.saturation, value.lightness);\n  }\n\n  throw new PolishedError(1);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsla(359, 0.75, 0.4, 0.7),\n *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n *   background: hsla(359, 0.75, 0.4, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsla(359, 0.75, 0.4, 0.7)};\n *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n *   background: ${hsla(359, 0.75, 0.4, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"#b3191c\";\n * }\n */\n\n\nfunction hsla(value, saturation, lightness, alpha) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number' && typeof alpha === 'number') {\n    return alpha >= 1 ? hslToHex(value, saturation, lightness) : `rgba(${hslToRgb(value, saturation, lightness)},${alpha})`;\n  } else if (typeof value === 'object' && saturation === undefined && lightness === undefined && alpha === undefined) {\n    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`;\n  }\n\n  throw new PolishedError(2);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgb(255, 205, 100),\n *   background: rgb({ red: 255, green: 205, blue: 100 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgb(255, 205, 100)};\n *   background: ${rgb({ red: 255, green: 205, blue: 100 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffcd64\";\n *   background: \"#ffcd64\";\n * }\n */\n\n\nfunction rgb(value, green, blue) {\n  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {\n    return reduceHexValue(`#${numberToHex(value)}${numberToHex(green)}${numberToHex(blue)}`);\n  } else if (typeof value === 'object' && green === undefined && blue === undefined) {\n    return reduceHexValue(`#${numberToHex(value.red)}${numberToHex(value.green)}${numberToHex(value.blue)}`);\n  }\n\n  throw new PolishedError(6);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgba(255, 205, 100, 0.7),\n *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n *   background: rgba(255, 205, 100, 1),\n *   background: rgba('#ffffff', 0.4),\n *   background: rgba('black', 0.7),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgba(255, 205, 100, 0.7)};\n *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n *   background: ${rgba(255, 205, 100, 1)};\n *   background: ${rgba('#ffffff', 0.4)};\n *   background: ${rgba('black', 0.7)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,255,255,0.4)\";\n *   background: \"rgba(0,0,0,0.7)\";\n * }\n */\n\n\nfunction rgba(firstValue, secondValue, thirdValue, fourthValue) {\n  if (typeof firstValue === 'string' && typeof secondValue === 'number') {\n    const rgbValue = parseToRgb(firstValue);\n    return `rgba(${rgbValue.red},${rgbValue.green},${rgbValue.blue},${secondValue})`;\n  } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {\n    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : `rgba(${firstValue},${secondValue},${thirdValue},${fourthValue})`;\n  } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {\n    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : `rgba(${firstValue.red},${firstValue.green},${firstValue.blue},${firstValue.alpha})`;\n  }\n\n  throw new PolishedError(7);\n}\n\nconst isRgb = color => typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n\nconst isRgba = color => typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && typeof color.alpha === 'number';\n\nconst isHsl = color => typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n\nconst isHsla = color => typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && typeof color.alpha === 'number';\n/**\n * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: toColorString({ red: 255, green: 205, blue: 100 }),\n *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */\n\n\nfunction toColorString(color) {\n  if (typeof color !== 'object') throw new PolishedError(8);\n  if (isRgba(color)) return rgba(color);\n  if (isRgb(color)) return rgb(color);\n  if (isHsla(color)) return hsla(color);\n  if (isHsl(color)) return hsl(color);\n  throw new PolishedError(8);\n} // Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-redeclare\n\n\nfunction curried(f, length, acc) {\n  return function fn() {\n    // eslint-disable-next-line prefer-rest-params\n    const combined = acc.concat(Array.prototype.slice.call(arguments));\n    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);\n  };\n} // eslint-disable-next-line no-redeclare\n\n\nfunction curry(f) {\n  // eslint-disable-line no-redeclare\n  return curried(f, f.length, []);\n}\n/**\n * Changes the hue of the color. Hue is a number between 0 to 360. The first\n * argument for adjustHue is the amount of degrees the color is rotated around\n * the color wheel, always producing a positive hue value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: adjustHue(180, '#448'),\n *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${adjustHue(180, '#448')};\n *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#888844\";\n *   background: \"rgba(136,136,68,0.7)\";\n * }\n */\n\n\nfunction adjustHue(degree, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: hslColor.hue + parseFloat(degree)\n  }));\n} // prettier-ignore\n\n\nconst curriedAdjustHue = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(adjustHue);\n/**\n * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: complement('#448'),\n *   background: complement('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${complement('#448')};\n *   background: ${complement('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#884\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\n\nfunction complement(color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: (hslColor.hue + 180) % 360\n  }));\n}\n\nfunction guard(lowerBoundary, upperBoundary, value) {\n  return Math.max(lowerBoundary, Math.min(upperBoundary, value));\n}\n/**\n * Returns a string value for the darkened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: darken(0.2, '#FFCD64'),\n *   background: darken('0.2', 'rgba(255,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${darken(0.2, '#FFCD64')};\n *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffbd31\";\n *   background: \"rgba(255,189,49,0.7)\";\n * }\n */\n\n\nfunction darken(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedDarken = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(darken);\n/**\n * Decreases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the desaturate function is the amount by how much the color\n * intensity should be decreased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: desaturate(0.2, '#CCCD64'),\n *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${desaturate(0.2, '#CCCD64')};\n *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#b8b979\";\n *   background: \"rgba(184,185,121,0.7)\";\n * }\n */\n\nfunction desaturate(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedDesaturate = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(desaturate);\n/**\n * Returns a number (float) representing the luminance of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',\n *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)',\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};\n *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)'};\n *\n * // CSS in JS Output\n *\n * div {\n *   background: \"#CCCD64\";\n *   background: \"rgba(58, 133, 255, 1)\";\n * }\n */\n\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  const rgbColor = parseToRgb(color);\n  const [r, g, b] = Object.keys(rgbColor).map(key => {\n    const channel = rgbColor[key] / 255;\n    return channel <= 0.03928 ? channel / 12.92 : ((channel + 0.055) / 1.055) ** 2.4;\n  });\n  return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));\n}\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n *\n * @example\n * const contrastRatio = getContrast('#444', '#fff');\n */\n\n\nfunction getContrast(color1, color2) {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n  return parseFloat((luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05)).toFixed(2));\n}\n/**\n * Converts the color to a grayscale, by reducing its saturation to 0.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: grayscale('#CCCD64'),\n *   background: grayscale('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${grayscale('#CCCD64')};\n *   background: ${grayscale('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#999\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\n\n\nfunction grayscale(color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: 0\n  }));\n}\n/**\n * Converts a HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */\n\n\nfunction hslToColorString(color) {\n  if (typeof color === 'object' && typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number') {\n    if (color.alpha && typeof color.alpha === 'number') {\n      return hsla({\n        hue: color.hue,\n        saturation: color.saturation,\n        lightness: color.lightness,\n        alpha: color.alpha\n      });\n    }\n\n    return hsl({\n      hue: color.hue,\n      saturation: color.saturation,\n      lightness: color.lightness\n    });\n  }\n\n  throw new PolishedError(45);\n}\n/**\n * Inverts the red, green and blue values of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: invert('#CCCD64'),\n *   background: invert('rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${invert('#CCCD64')};\n *   background: ${invert('rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#33329b\";\n *   background: \"rgba(154,155,50,0.7)\";\n * }\n */\n\n\nfunction invert(color) {\n  if (color === 'transparent') return color; // parse color string to rgb\n\n  const value = parseToRgb(color);\n  return toColorString(_extends({}, value, {\n    red: 255 - value.red,\n    green: 255 - value.green,\n    blue: 255 - value.blue\n  }));\n}\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */\n\n\nfunction lighten(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedLighten = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(lighten);\n/**\n * Determines which contrast guidelines have been met for two colors.\n * Based on the [contrast calculations recommended by W3](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html).\n *\n * @example\n * const scores = meetsContrastGuidelines('#444', '#fff');\n */\n\nfunction meetsContrastGuidelines(color1, color2) {\n  const contrastRatio = getContrast(color1, color2);\n  return {\n    AA: contrastRatio >= 4.5,\n    AALarge: contrastRatio >= 3,\n    AAA: contrastRatio >= 7,\n    AAALarge: contrastRatio >= 4.5\n  };\n}\n/**\n * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: mix(0.5, '#f00', '#00f')\n *   background: mix(0.25, '#f00', '#00f')\n *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${mix(0.5, '#f00', '#00f')};\n *   background: ${mix(0.25, '#f00', '#00f')};\n *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#7f007f\";\n *   background: \"#3f00bf\";\n *   background: \"rgba(63, 0, 191, 0.75)\";\n * }\n */\n\n\nfunction mix(weight, color, otherColor) {\n  if (color === 'transparent') return otherColor;\n  if (otherColor === 'transparent') return color;\n  if (weight === 0) return otherColor;\n  const parsedColor1 = parseToRgb(color);\n\n  const color1 = _extends({}, parsedColor1, {\n    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1\n  });\n\n  const parsedColor2 = parseToRgb(otherColor);\n\n  const color2 = _extends({}, parsedColor2, {\n    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1\n  }); // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n\n\n  const alphaDelta = color1.alpha - color2.alpha;\n  const x = parseFloat(weight) * 2 - 1;\n  const y = x * alphaDelta === -1 ? x : x + alphaDelta;\n  const z = 1 + x * alphaDelta;\n  const weight1 = (y / z + 1) / 2.0;\n  const weight2 = 1 - weight1;\n  const mixedColor = {\n    red: Math.floor(color1.red * weight1 + color2.red * weight2),\n    green: Math.floor(color1.green * weight1 + color2.green * weight2),\n    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),\n    alpha: color1.alpha * (parseFloat(weight) / 1.0) + color2.alpha * (1 - parseFloat(weight) / 1.0)\n  };\n  return rgba(mixedColor);\n} // prettier-ignore\n\n\nconst curriedMix = /*#__PURE__*/curry\n/* ::<number | string, string, string, string> */\n(mix);\n/**\n * Increases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');\n *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),\n *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};\n *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},\n *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#fff\";\n *   background: \"rgba(255,255,255,0.7)\";\n *   background: \"rgba(255,0,0,0.7)\";\n * }\n */\n\nfunction opacify(amount, color) {\n  if (color === 'transparent') return color;\n  const parsedColor = parseToRgb(color);\n  const alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n\n  const colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)\n  });\n\n  return rgba(colorWithAlpha);\n} // prettier-ignore\n\n\nconst curriedOpacify = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(opacify);\nconst defaultLightReturnColor = '#000';\nconst defaultDarkReturnColor = '#fff';\n/**\n * Returns black or white (or optional light and dark return colors) for best\n * contrast depending on the luminosity of the given color.\n * When passing custom return colors, set `strict` to `true` to ensure that the\n * return color always meets or exceeds WCAG level AA or greater. If this test\n * fails, the default return color (black or white) is returned in place of the\n * custom return color.\n *\n * Follows [W3C specs for readability](https://www.w3.org/TR/WCAG20-TECHS/G18.html).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   color: readableColor('#000'),\n *   color: readableColor('black', '#001', '#ff8'),\n *   color: readableColor('white', '#001', '#ff8'),\n *   color: readableColor('red', '#333', '#ddd', true)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   color: ${readableColor('#000')};\n *   color: ${readableColor('black', '#001', '#ff8')};\n *   color: ${readableColor('white', '#001', '#ff8')};\n *   color: ${readableColor('red', '#333', '#ddd', true)};\n * `\n *\n * // CSS in JS Output\n * element {\n *   color: \"#fff\";\n *   color: \"#ff8\";\n *   color: \"#001\";\n *   color: \"#000\";\n * }\n */\n\nfunction readableColor(color, lightReturnColor = defaultLightReturnColor, darkReturnColor = defaultDarkReturnColor, strict = false) {\n  const isLightColor = getLuminance(color) > 0.179;\n  const preferredReturnColor = isLightColor ? lightReturnColor : darkReturnColor; // TODO: Make `strict` the default behaviour in the next major release.\n  // Without `strict`, this may return a color that does not meet WCAG AA.\n\n  if (!strict || getContrast(color, preferredReturnColor) >= 4.5) {\n    return preferredReturnColor;\n  }\n\n  return isLightColor ? defaultLightReturnColor : defaultDarkReturnColor;\n}\n/**\n * Converts a RgbColor or RgbaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb` or `rgba`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100 }),\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n * }\n */\n\n\nfunction rgbToColorString(color) {\n  if (typeof color === 'object' && typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number') {\n    if (color.alpha && typeof color.alpha === 'number') {\n      return rgba({\n        red: color.red,\n        green: color.green,\n        blue: color.blue,\n        alpha: color.alpha\n      });\n    }\n\n    return rgb({\n      red: color.red,\n      green: color.green,\n      blue: color.blue\n    });\n  }\n\n  throw new PolishedError(46);\n}\n/**\n * Increases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the saturate function is the amount by how much the color\n * intensity should be increased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: saturate(0.2, '#CCCD64'),\n *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${saturate(0.2, '#FFCD64')};\n *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e0e250\";\n *   background: \"rgba(224,226,80,0.7)\";\n * }\n */\n\n\nfunction saturate(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedSaturate = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(saturate);\n/**\n * Sets the hue of a color to the provided value. The hue range can be\n * from 0 and 359.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setHue(42, '#CCCD64'),\n *   background: setHue('244', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setHue(42, '#CCCD64')};\n *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#cdae64\";\n *   background: \"rgba(107,100,205,0.7)\";\n * }\n */\n\nfunction setHue(hue, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    hue: parseFloat(hue)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetHue = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setHue);\n/**\n * Sets the lightness of a color to the provided value. The lightness range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setLightness(0.2, '#CCCD64'),\n *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setLightness(0.2, '#CCCD64')};\n *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#4d4d19\";\n *   background: \"rgba(223,224,159,0.7)\";\n * }\n */\n\nfunction setLightness(lightness, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    lightness: parseFloat(lightness)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetLightness = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setLightness);\n/**\n * Sets the saturation of a color to the provided value. The saturation range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setSaturation(0.2, '#CCCD64'),\n *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setSaturation(0.2, '#CCCD64')};\n *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#adad84\";\n *   background: \"rgba(228,229,76,0.7)\";\n * }\n */\n\nfunction setSaturation(saturation, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: parseFloat(saturation)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetSaturation = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setSaturation);\n/**\n * Shades a color by mixing it with black. `shade` can produce\n * hue shifts, where as `darken` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: shade(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${shade(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#00003f\";\n * }\n */\n\nfunction shade(percentage, color) {\n  if (color === 'transparent') return color;\n  return curriedMix(parseFloat(percentage), 'rgb(0, 0, 0)', color);\n} // prettier-ignore\n\n\nconst curriedShade = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(shade);\n/**\n * Tints a color by mixing it with white. `tint` can produce\n * hue shifts, where as `lighten` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: tint(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${tint(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#bfbfff\";\n * }\n */\n\nfunction tint(percentage, color) {\n  if (color === 'transparent') return color;\n  return curriedMix(parseFloat(percentage), 'rgb(255, 255, 255)', color);\n} // prettier-ignore\n\n\nconst curriedTint = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(tint);\n/**\n * Decreases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: transparentize(0.1, '#fff');\n *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${transparentize(0.1, '#fff')};\n *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */\n\nfunction transparentize(amount, color) {\n  if (color === 'transparent') return color;\n  const parsedColor = parseToRgb(color);\n  const alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n\n  const colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 - parseFloat(amount) * 100) / 100)\n  });\n\n  return rgba(colorWithAlpha);\n} // prettier-ignore\n\n\nconst curriedTransparentize = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(transparentize);\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */\n\nfunction animation(...args) {\n  // Allow single or multiple animations passed\n  const multiMode = Array.isArray(args[0]);\n\n  if (!multiMode && args.length > 8) {\n    throw new PolishedError(64);\n  }\n\n  const code = args.map(arg => {\n    if (multiMode && !Array.isArray(arg) || !multiMode && Array.isArray(arg)) {\n      throw new PolishedError(65);\n    }\n\n    if (Array.isArray(arg) && arg.length > 8) {\n      throw new PolishedError(66);\n    }\n\n    return Array.isArray(arg) ? arg.join(' ') : arg;\n  }).join(', ');\n  return {\n    animation: code\n  };\n}\n/**\n * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'backgroundImage': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n * }\n */\n\n\nfunction backgroundImages(...properties) {\n  return {\n    backgroundImage: properties.join(', ')\n  };\n}\n/**\n * Shorthand that accepts any number of background values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n * }\n */\n\n\nfunction backgrounds(...properties) {\n  return {\n    background: properties.join(', ')\n  };\n}\n\nconst sideMap = ['top', 'right', 'bottom', 'left'];\n/**\n * Shorthand for the border property that splits out individual properties for use with tools like Fela and Styletron. A side keyword can optionally be passed to target only one side's border properties.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...border('1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderColor': 'red',\n *   'borderStyle': 'solid',\n *   'borderWidth': `1px`,\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...border('top', '1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('top', '1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderTopStyle': 'solid',\n *   'borderTopWidth': `1px`,\n * }\n */\n\nfunction border(sideKeyword, ...values) {\n  if (typeof sideKeyword === 'string' && sideMap.indexOf(sideKeyword) >= 0) {\n    return {\n      [`border${capitalizeString(sideKeyword)}Width`]: values[0],\n      [`border${capitalizeString(sideKeyword)}Style`]: values[1],\n      [`border${capitalizeString(sideKeyword)}Color`]: values[2]\n    };\n  } else {\n    values.unshift(sideKeyword);\n    return {\n      borderWidth: values[0],\n      borderStyle: values[1],\n      borderColor: values[2]\n    };\n  }\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderColor('red', 'green', 'blue', 'yellow')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderColor('red', 'green', 'blue', 'yellow')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderRightColor': 'green',\n *   'borderBottomColor': 'blue',\n *   'borderLeftColor': 'yellow'\n * }\n */\n\n\nfunction borderColor(...values) {\n  return directionalProperty('borderColor', ...values);\n}\n/**\n * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderRadius('top', '5px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderRadius('top', '5px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopRightRadius': '5px',\n *   'borderTopLeftRadius': '5px',\n * }\n */\n\n\nfunction borderRadius(side, radius) {\n  const uppercaseSide = capitalizeString(side);\n\n  if (!radius && radius !== 0) {\n    throw new PolishedError(62);\n  }\n\n  if (uppercaseSide === 'Top' || uppercaseSide === 'Bottom') {\n    return {\n      [`border${uppercaseSide}RightRadius`]: radius,\n      [`border${uppercaseSide}LeftRadius`]: radius\n    };\n  }\n\n  if (uppercaseSide === 'Left' || uppercaseSide === 'Right') {\n    return {\n      [`borderTop${uppercaseSide}Radius`]: radius,\n      [`borderBottom${uppercaseSide}Radius`]: radius\n    };\n  }\n\n  throw new PolishedError(63);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderStyle('solid', 'dashed', 'dotted', 'double')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopStyle': 'solid',\n *   'borderRightStyle': 'dashed',\n *   'borderBottomStyle': 'dotted',\n *   'borderLeftStyle': 'double'\n * }\n */\n\n\nfunction borderStyle(...values) {\n  return directionalProperty('borderStyle', ...values);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderWidth('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderWidth('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopWidth': '12px',\n *   'borderRightWidth': '24px',\n *   'borderBottomWidth': '36px',\n *   'borderLeftWidth': '48px'\n * }\n */\n\n\nfunction borderWidth(...values) {\n  return directionalProperty('borderWidth', ...values);\n}\n\nfunction generateSelectors(template, state) {\n  const stateSuffix = state ? `:${state}` : '';\n  return template(stateSuffix);\n}\n/**\n * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.\n * @private\n */\n\n\nfunction statefulSelectors(states, template, stateMap) {\n  if (!template) throw new PolishedError(67);\n  if (states.length === 0) return generateSelectors(template, null);\n  let selectors = [];\n\n  for (let i = 0; i < states.length; i += 1) {\n    if (stateMap && stateMap.indexOf(states[i]) < 0) {\n      throw new PolishedError(68);\n    }\n\n    selectors.push(generateSelectors(template, states[i]));\n  }\n\n  selectors = selectors.join(',');\n  return selectors;\n}\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template(state) {\n  return `button${state},\n  input[type=\"button\"]${state},\n  input[type=\"reset\"]${state},\n  input[type=\"submit\"]${state}`;\n}\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */\n\n\nfunction buttons(...states) {\n  return statefulSelectors(states, template, stateMap);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...margin('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${margin('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'marginTop': '12px',\n *   'marginRight': '24px',\n *   'marginBottom': '36px',\n *   'marginLeft': '48px'\n * }\n */\n\n\nfunction margin(...values) {\n  return directionalProperty('margin', ...values);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...padding('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${padding('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\n\n\nfunction padding(...values) {\n  return directionalProperty('padding', ...values);\n}\n\nconst positionMap$1 = ['absolute', 'fixed', 'relative', 'static', 'sticky'];\n/**\n * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...position('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...position('absolute', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('absolute', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'position': 'absolute',\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n */\n\nfunction position(firstValue, ...values) {\n  if (positionMap$1.indexOf(firstValue) >= 0 && firstValue) {\n    return _extends({}, directionalProperty('', ...values), {\n      position: firstValue\n    });\n  } else {\n    return directionalProperty('', firstValue, ...values);\n  }\n}\n/**\n * Shorthand to set the height and width properties in a single statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...size('300px', '250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${size('300px', '250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'height': '300px',\n *   'width': '250px',\n * }\n */\n\n\nfunction size(height, width = height) {\n  return {\n    height,\n    width\n  };\n}\n\nconst stateMap$1 = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template$1(state) {\n  return `input[type=\"color\"]${state},\n    input[type=\"date\"]${state},\n    input[type=\"datetime\"]${state},\n    input[type=\"datetime-local\"]${state},\n    input[type=\"email\"]${state},\n    input[type=\"month\"]${state},\n    input[type=\"number\"]${state},\n    input[type=\"password\"]${state},\n    input[type=\"search\"]${state},\n    input[type=\"tel\"]${state},\n    input[type=\"text\"]${state},\n    input[type=\"time\"]${state},\n    input[type=\"url\"]${state},\n    input[type=\"week\"]${state},\n    input:not([type])${state},\n    textarea${state}`;\n}\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'input[type=\"color\"]:active,\n *  input[type=\"date\"]:active,\n *  input[type=\"datetime\"]:active,\n *  input[type=\"datetime-local\"]:active,\n *  input[type=\"email\"]:active,\n *  input[type=\"month\"]:active,\n *  input[type=\"number\"]:active,\n *  input[type=\"password\"]:active,\n *  input[type=\"search\"]:active,\n *  input[type=\"tel\"]:active,\n *  input[type=\"text\"]:active,\n *  input[type=\"time\"]:active,\n *  input[type=\"url\"]:active,\n *  input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */\n\n\nfunction textInputs(...states) {\n  return statefulSelectors(states, template$1, stateMap$1);\n}\n/**\n * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same transition values to (second parameter).\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),\n *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};\n *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',\n * }\n */\n\n\nfunction transitions(...properties) {\n  if (Array.isArray(properties[0]) && properties.length === 2) {\n    const value = properties[1];\n\n    if (typeof value !== 'string') {\n      throw new PolishedError(61);\n    }\n\n    const transitionsString = properties[0].map(property => `${property} ${value}`).join(', ');\n    return {\n      transition: transitionsString\n    };\n  } else {\n    return {\n      transition: properties.join(', ')\n    };\n  }\n}\n\nexport { curriedAdjustHue as adjustHue, animation, backgroundImages, backgrounds, between, border, borderColor, borderRadius, borderStyle, borderWidth, buttons, clearFix, complement, cover, cssVar, curriedDarken as darken, curriedDesaturate as desaturate, directionalProperty, ellipsis, em, fluidRange, fontFace, getContrast, getLuminance, getValueAndUnit, grayscale, hiDPI, hideText, hideVisually, hsl, hslToColorString, hsla, invert, curriedLighten as lighten, linearGradient, margin, math, meetsContrastGuidelines, curriedMix as mix, modularScale, normalize, curriedOpacify as opacify, padding, parseToHsl, parseToRgb, position, radialGradient, readableColor, rem, retinaImage, rgb, rgbToColorString, rgba, curriedSaturate as saturate, curriedSetHue as setHue, curriedSetLightness as setLightness, curriedSetSaturation as setSaturation, curriedShade as shade, size, stripUnit, textInputs, timingFunctions, curriedTint as tint, toColorString, transitions, curriedTransparentize as transparentize, triangle, wordWrap };","map":{"version":3,"sources":["/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/node_modules/polished/dist/polished.esm.js"],"names":["_extends","last","a","length","negation","addition","b","subtraction","multiplication","division","factorial","NaN","Infinity","power","sqrt","Math","max","min","comma","Array","of","defaultMathSymbols","symbols","postfix","symbol","f","notation","precedence","rightToLeft","argCount","regSymbol","infix","prefix","undefined","func","ERRORS","format","args","c","push","forEach","d","replace","PolishedError","Error","constructor","code","process","env","NODE_ENV","unitRegExp","mergeSymbolMaps","additionalSymbols","symbolMap","exec","operators","values","op","pop","concat","splice","calculate","expression","match","pattern","RegExp","Object","keys","map","key","sort","val","join","lastIndex","afterValue","token","bad","notNumber","notNewValue","notAfterValue","index","curr","prev","reverseString","str","split","reverse","math","formula","reversedFormula","formulaMatch","every","unit","cleanFormula","cssVariableRegex","cssVar","cssVariable","passThrough","variableValue","document","documentElement","getComputedStyle","getPropertyValue","trim","capitalizeString","string","charAt","toUpperCase","slice","positionMap","generateProperty","property","position","toLowerCase","splitProperty","reduce","acc","joinedProperty","generateStyles","valuesWithDefaults","styles","i","directionalProperty","firstValue","secondValue","thirdValue","fourthValue","endsWith","suffix","substr","cssRegex","stripUnit","value","unitReturn","matchedValue","console","warn","parseFloat","pxtoFactory","to","pxval","base","newPxval","newBase","em","cssRegex$1","getValueAndUnit","ratioNames","minorSecond","majorSecond","minorThird","majorThird","perfectFourth","augFourth","perfectFifth","minorSixth","goldenSection","majorSixth","minorSeventh","majorSeventh","octave","majorTenth","majorEleventh","majorTwelfth","doubleOctave","getRatio","ratioName","modularScale","steps","ratio","realBase","realRatio","rem","between","fromSize","toSize","minScreen","maxScreen","unitlessFromSize","fromSizeUnit","unitlessToSize","toSizeUnit","unitlessMinScreen","minScreenUnit","unitlessMaxScreen","maxScreenUnit","slope","toFixed","clearFix","parent","pseudoSelector","clear","content","display","cover","offset","top","right","bottom","left","ellipsis","width","maxWidth","overflow","textOverflow","whiteSpace","wordWrap","fluidRange","cssProp","isArray","mediaQueries","fallbacks","obj","prop","dataURIRegex","formatHintMap","woff","woff2","ttf","otf","eot","svg","svgz","generateFormatHint","formatHint","isDataURI","fontFilePath","generateFileReferences","fileFormats","fileFontReferences","generateLocalReferences","localFonts","localFontReferences","font","generateSources","fontReferences","fontFace","fontFamily","fontStretch","fontStyle","fontVariant","fontWeight","unicodeRange","fontDisplay","fontVariationSettings","fontFeatureSettings","fontFaceDeclaration","src","JSON","parse","stringify","hideText","textIndent","hideVisually","border","clip","height","margin","padding","hiDPI","round","constructGradientValue","literals","substitutions","template","definedValues","filter","substitute","_","t","_t","linearGradient","colorStops","fallback","toDirection","backgroundColor","backgroundImage","normalize","html","lineHeight","textSizeAdjust","body","h1","fontSize","hr","boxSizing","pre","borderBottom","textDecoration","small","verticalAlign","sub","sup","img","borderStyle","textTransform","WebkitAppearance","outline","fieldset","legend","color","progress","textarea","outlineOffset","details","summary","_$1","_t$1","radialGradient","extent","shape","retinaImage","filename","backgroundSize","extension","retinaFilename","retinaSuffix","ext","rFilename","functionsMap","easeInBack","easeInCirc","easeInCubic","easeInExpo","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutBack","easeOutCubic","easeOutCirc","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","easeInOutBack","easeInOutCirc","easeInOutCubic","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","getTimingFunction","functionName","timingFunctions","timingFunction","getBorderWidth","pointingDirection","fullWidth","halfWidth","fullHeight","halfHeight","getBorderColor","foregroundColor","triangle","widthAndUnit","heightAndUnit","isNaN","borderColor","borderWidth","wrap","wordBreak","overflowWrap","colorToInt","convertToInt","red","green","blue","hslToRgb","hue","saturation","lightness","convert","huePrime","chroma","abs","secondComponent","lightnessModification","finalRed","finalGreen","finalBlue","namedColorMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","nameToHex","normalizedColorName","hexRegex","hexRgbaRegex","reducedHexRegex","reducedRgbaHexRegex","rgbRegex","rgbaRegex","hslRegex","hslaRegex","parseToRgb","normalizedColor","parseInt","alpha","rgbMatched","rgbaMatched","hslMatched","rgbColorString","hslRgbMatched","hslaMatched","rgbToHsl","delta","parseToHsl","reduceHexValue","numberToHex","hex","toString","colorToHex","convertToHex","hslToHex","hsl","hsla","rgb","rgba","rgbValue","isRgb","isRgba","isHsl","isHsla","toColorString","curried","fn","combined","prototype","call","arguments","apply","curry","adjustHue","degree","hslColor","curriedAdjustHue","complement","guard","lowerBoundary","upperBoundary","darken","amount","curriedDarken","desaturate","curriedDesaturate","getLuminance","rgbColor","r","g","channel","getContrast","color1","color2","luminance1","luminance2","grayscale","hslToColorString","invert","lighten","curriedLighten","meetsContrastGuidelines","contrastRatio","AA","AALarge","AAA","AAALarge","mix","weight","otherColor","parsedColor1","parsedColor2","alphaDelta","x","y","z","weight1","weight2","mixedColor","floor","curriedMix","opacify","parsedColor","colorWithAlpha","curriedOpacify","defaultLightReturnColor","defaultDarkReturnColor","readableColor","lightReturnColor","darkReturnColor","strict","isLightColor","preferredReturnColor","rgbToColorString","saturate","curriedSaturate","setHue","curriedSetHue","setLightness","curriedSetLightness","setSaturation","curriedSetSaturation","shade","percentage","curriedShade","tint","curriedTint","transparentize","curriedTransparentize","animation","multiMode","arg","backgroundImages","properties","backgrounds","background","sideMap","sideKeyword","indexOf","unshift","borderRadius","side","radius","uppercaseSide","generateSelectors","state","stateSuffix","statefulSelectors","states","stateMap","selectors","buttons","positionMap$1","size","stateMap$1","template$1","textInputs","transitions","transitionsString","transition"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\n\nfunction last(...a) {\n  return a[a.length - 1];\n}\n\nfunction negation(a) {\n  return -a;\n}\n\nfunction addition(a, b) {\n  return a + b;\n}\n\nfunction subtraction(a, b) {\n  return a - b;\n}\n\nfunction multiplication(a, b) {\n  return a * b;\n}\n\nfunction division(a, b) {\n  return a / b;\n}\n\nfunction factorial(a) {\n  if (a % 1 || !(+a >= 0)) return NaN;\n  if (a > 170) return Infinity;else if (a === 0) return 1;else {\n    return a * factorial(a - 1);\n  }\n}\n\nfunction power(a, b) {\n  return a ** b;\n}\n\nfunction sqrt(a) {\n  return Math.sqrt(a);\n}\n\nfunction max(...a) {\n  return Math.max(...a);\n}\n\nfunction min(...a) {\n  return Math.min(...a);\n}\n\nfunction comma(...a) {\n  return Array.of(...a);\n}\n\nconst defaultMathSymbols = {\n  symbols: {\n    '!': {\n      postfix: {\n        symbol: '!',\n        f: factorial,\n        notation: 'postfix',\n        precedence: 6,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '!',\n      regSymbol: '!'\n    },\n    '^': {\n      infix: {\n        symbol: '^',\n        f: power,\n        notation: 'infix',\n        precedence: 5,\n        rightToLeft: 1,\n        argCount: 2\n      },\n      symbol: '^',\n      regSymbol: '\\\\^'\n    },\n    '*': {\n      infix: {\n        symbol: '*',\n        f: multiplication,\n        notation: 'infix',\n        precedence: 4,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: '*',\n      regSymbol: '\\\\*'\n    },\n    '/': {\n      infix: {\n        symbol: '/',\n        f: division,\n        notation: 'infix',\n        precedence: 4,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: '/',\n      regSymbol: '/'\n    },\n    '+': {\n      infix: {\n        symbol: '+',\n        f: addition,\n        notation: 'infix',\n        precedence: 2,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      prefix: {\n        symbol: '+',\n        f: last,\n        notation: 'prefix',\n        precedence: 3,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '+',\n      regSymbol: '\\\\+'\n    },\n    '-': {\n      infix: {\n        symbol: '-',\n        f: subtraction,\n        notation: 'infix',\n        precedence: 2,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      prefix: {\n        symbol: '-',\n        f: negation,\n        notation: 'prefix',\n        precedence: 3,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '-',\n      regSymbol: '-'\n    },\n    ',': {\n      infix: {\n        symbol: ',',\n        f: comma,\n        notation: 'infix',\n        precedence: 1,\n        rightToLeft: 0,\n        argCount: 2\n      },\n      symbol: ',',\n      regSymbol: ','\n    },\n    '(': {\n      prefix: {\n        symbol: '(',\n        f: last,\n        notation: 'prefix',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: '(',\n      regSymbol: '\\\\('\n    },\n    ')': {\n      postfix: {\n        symbol: ')',\n        f: undefined,\n        notation: 'postfix',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: ')',\n      regSymbol: '\\\\)'\n    },\n    min: {\n      func: {\n        symbol: 'min',\n        f: min,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'min',\n      regSymbol: 'min\\\\b'\n    },\n    max: {\n      func: {\n        symbol: 'max',\n        f: max,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'max',\n      regSymbol: 'max\\\\b'\n    },\n    sqrt: {\n      func: {\n        symbol: 'sqrt',\n        f: sqrt,\n        notation: 'func',\n        precedence: 0,\n        rightToLeft: 0,\n        argCount: 1\n      },\n      symbol: 'sqrt',\n      regSymbol: 'sqrt\\\\b'\n    }\n  }\n};\n\n// based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js\n\n/**\n * Parse errors.md and turn it into a simple hash of code: message\n * @private\n */\nconst ERRORS = {\n  \"1\": \"Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\\n\\n\",\n  \"2\": \"Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\\n\\n\",\n  \"3\": \"Passed an incorrect argument to a color function, please pass a string representation of a color.\\n\\n\",\n  \"4\": \"Couldn't generate valid rgb string from %s, it returned %s.\\n\\n\",\n  \"5\": \"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\\n\\n\",\n  \"6\": \"Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\\n\\n\",\n  \"7\": \"Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\\n\\n\",\n  \"8\": \"Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\\n\\n\",\n  \"9\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n  \"10\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n  \"11\": \"Invalid value passed as base to modularScale, expected number or em string but got \\\"%s\\\"\\n\\n\",\n  \"12\": \"Expected a string ending in \\\"px\\\" or a number passed as the first argument to %s(), got \\\"%s\\\" instead.\\n\\n\",\n  \"13\": \"Expected a string ending in \\\"px\\\" or a number passed as the second argument to %s(), got \\\"%s\\\" instead.\\n\\n\",\n  \"14\": \"Passed invalid pixel value (\\\"%s\\\") to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"15\": \"Passed invalid base value (\\\"%s\\\") to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"16\": \"You must provide a template to this method.\\n\\n\",\n  \"17\": \"You passed an unsupported selector state to this method.\\n\\n\",\n  \"18\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n  \"19\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n  \"20\": \"expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n  \"21\": \"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n  \"22\": \"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n  \"23\": \"fontFace expects a name of a font-family.\\n\\n\",\n  \"24\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n  \"25\": \"fontFace expects localFonts to be an array.\\n\\n\",\n  \"26\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n  \"27\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"28\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n  \"29\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n  \"30\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n  \"31\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\\n\\n\",\n  \"32\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\\n\\n\",\n  \"33\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\\n\\n\",\n  \"34\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n  \"35\": \"borderRadius expects one of \\\"top\\\", \\\"bottom\\\", \\\"left\\\" or \\\"right\\\" as the first argument.\\n\\n\",\n  \"36\": \"Property must be a string value.\\n\\n\",\n  \"37\": \"Syntax Error at %s.\\n\\n\",\n  \"38\": \"Formula contains a function that needs parentheses at %s.\\n\\n\",\n  \"39\": \"Formula is missing closing parenthesis at %s.\\n\\n\",\n  \"40\": \"Formula has too many closing parentheses at %s.\\n\\n\",\n  \"41\": \"All values in a formula must have the same unit or be unitless.\\n\\n\",\n  \"42\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n  \"43\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n  \"44\": \"Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\\n\\n\",\n  \"45\": \"Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\\n\\n\",\n  \"46\": \"Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\\n\\n\",\n  \"47\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n  \"48\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n  \"49\": \"Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n  \"50\": \"Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\\n\\n\",\n  \"51\": \"Expects the first argument object to have the properties prop, fromSize, and toSize.\\n\\n\",\n  \"52\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n  \"53\": \"fontFace expects localFonts to be an array.\\n\\n\",\n  \"54\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n  \"55\": \"fontFace expects a name of a font-family.\\n\\n\",\n  \"56\": \"linearGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"57\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n  \"58\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n  \"59\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n  \"60\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n  \"61\": \"Property must be a string value.\\n\\n\",\n  \"62\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n  \"63\": \"borderRadius expects one of \\\"top\\\", \\\"bottom\\\", \\\"left\\\" or \\\"right\\\" as the first argument.\\n\\n\",\n  \"64\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n  \"65\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\\n\\n\",\n  \"66\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n  \"67\": \"You must provide a template to this method.\\n\\n\",\n  \"68\": \"You passed an unsupported selector state to this method.\\n\\n\",\n  \"69\": \"Expected a string ending in \\\"px\\\" or a number passed as the first argument to %s(), got %s instead.\\n\\n\",\n  \"70\": \"Expected a string ending in \\\"px\\\" or a number passed as the second argument to %s(), got %s instead.\\n\\n\",\n  \"71\": \"Passed invalid pixel value %s to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"72\": \"Passed invalid base value %s to %s(), please pass a value like \\\"12px\\\" or 12.\\n\\n\",\n  \"73\": \"Please provide a valid CSS variable.\\n\\n\",\n  \"74\": \"CSS variable not found.\\n\"\n};\n/**\n * super basic version of sprintf\n * @private\n */\n\nfunction format(...args) {\n  let a = args[0];\n  const b = [];\n  let c;\n\n  for (c = 1; c < args.length; c += 1) {\n    b.push(args[c]);\n  }\n\n  b.forEach(d => {\n    a = a.replace(/%[a-z]/, d);\n  });\n  return a;\n}\n/**\n * Create an error file out of errors.md for development and a simple web link to the full errors\n * in production mode.\n * @private\n */\n\n\nclass PolishedError extends Error {\n  constructor(code, ...args) {\n    if (process.env.NODE_ENV === 'production') {\n      super(`An error occurred. See https://github.com/styled-components/polished/blob/master/src/internalHelpers/errors.md#${code} for more information.`);\n    } else {\n      super(format(ERRORS[code], ...args));\n    }\n  }\n\n}\n\nconst unitRegExp = /((?!\\w)a|na|hc|mc|dg|me[r]?|xe|ni(?![a-zA-Z])|mm|cp|tp|xp|q(?!s)|hv|xamv|nimv|wv|sm|s(?!\\D|$)|ged|darg?|nrut)/g; // Merges additional math functionality into the defaults.\n\nfunction mergeSymbolMaps(additionalSymbols) {\n  const symbolMap = {};\n  symbolMap.symbols = additionalSymbols ? _extends({}, defaultMathSymbols.symbols, {}, additionalSymbols.symbols) : _extends({}, defaultMathSymbols.symbols);\n  return symbolMap;\n}\n\nfunction exec(operators, values) {\n  const op = operators.pop();\n  values.push(op.f(...[].concat(...values.splice(-op.argCount))));\n  return op.precedence;\n}\n\nfunction calculate(expression, additionalSymbols) {\n  const symbolMap = mergeSymbolMaps(additionalSymbols);\n  let match;\n  const operators = [symbolMap.symbols['('].prefix];\n  const values = [];\n  const pattern = new RegExp( // Pattern for numbers\n  `\\\\d+(?:\\\\.\\\\d+)?|${// ...and patterns for individual operators/function names\n  Object.keys(symbolMap.symbols).map(key => symbolMap.symbols[key]) // longer symbols should be listed first\n  // $FlowFixMe\n  .sort((a, b) => b.symbol.length - a.symbol.length) // $FlowFixMe\n  .map(val => val.regSymbol).join('|')}|(\\\\S)`, 'g');\n  pattern.lastIndex = 0; // Reset regular expression object\n\n  let afterValue = false;\n\n  do {\n    match = pattern.exec(expression);\n    const [token, bad] = match || [')', undefined];\n    const notNumber = symbolMap.symbols[token];\n    const notNewValue = notNumber && !notNumber.prefix && !notNumber.func;\n    const notAfterValue = !notNumber || !notNumber.postfix && !notNumber.infix; // Check for syntax errors:\n\n    if (bad || (afterValue ? notAfterValue : notNewValue)) {\n      throw new PolishedError(37, match ? match.index : expression.length, expression);\n    }\n\n    if (afterValue) {\n      // We either have an infix or postfix operator (they should be mutually exclusive)\n      const curr = notNumber.postfix || notNumber.infix;\n\n      do {\n        const prev = operators[operators.length - 1];\n        if ((curr.precedence - prev.precedence || prev.rightToLeft) > 0) break; // Apply previous operator, since it has precedence over current one\n      } while (exec(operators, values)); // Exit loop after executing an opening parenthesis or function\n\n\n      afterValue = curr.notation === 'postfix';\n\n      if (curr.symbol !== ')') {\n        operators.push(curr); // Postfix always has precedence over any operator that follows after it\n\n        if (afterValue) exec(operators, values);\n      }\n    } else if (notNumber) {\n      // prefix operator or function\n      operators.push(notNumber.prefix || notNumber.func);\n\n      if (notNumber.func) {\n        // Require an opening parenthesis\n        match = pattern.exec(expression);\n\n        if (!match || match[0] !== '(') {\n          throw new PolishedError(38, match ? match.index : expression.length, expression);\n        }\n      }\n    } else {\n      // number\n      values.push(+token);\n      afterValue = true;\n    }\n  } while (match && operators.length);\n\n  if (operators.length) {\n    throw new PolishedError(39, match ? match.index : expression.length, expression);\n  } else if (match) {\n    throw new PolishedError(40, match ? match.index : expression.length, expression);\n  } else {\n    return values.pop();\n  }\n}\n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\n/**\n * Helper for doing math with CSS Units. Accepts a formula as a string. All values in the formula must have the same unit (or be unitless). Supports complex formulas utliziing addition, subtraction, multiplication, division, square root, powers, factorial, min, max, as well as parentheses for order of operation.\n *\n *In cases where you need to do calculations with mixed units where one unit is a [relative length unit](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units), you will want to use [CSS Calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc).\n *\n * *warning* While we've done everything possible to ensure math safely evalutes formulas expressed as strings, you should always use extreme caution when passing `math` user provided values.\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: math('12rem + 8rem'),\n *   fontSize: math('(12px + 2px) * 3'),\n *   fontSize: math('3px^2 + sqrt(4)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${math('12rem + 8rem')};\n *   fontSize: ${math('(12px + 2px) * 3')};\n *   fontSize: ${math('3px^2 + sqrt(4)')};\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   fontSize: '20rem',\n *   fontSize: '42px',\n *   fontSize: '11px',\n * }\n */\n\n\nfunction math(formula, additionalSymbols) {\n  const reversedFormula = reverseString(formula);\n  const formulaMatch = reversedFormula.match(unitRegExp); // Check that all units are the same\n\n  if (formulaMatch && !formulaMatch.every(unit => unit === formulaMatch[0])) {\n    throw new PolishedError(41);\n  }\n\n  const cleanFormula = reverseString(reversedFormula.replace(unitRegExp, ''));\n  return `${calculate(cleanFormula, additionalSymbols)}${formulaMatch ? reverseString(formulaMatch[0]) : ''}`;\n}\n\nconst cssVariableRegex = /--[\\S]*/g;\n/**\n * Fetches the value of a passed CSS Variable.\n *\n * Passthrough can be enabled (off by default) for when you are unsure of the input and want non-variable values to be returned instead of an error.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'background': cssVar('--background-color'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${cssVar('--background-color')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'background': 'red'\n * }\n */\n\nfunction cssVar(cssVariable, passThrough) {\n  if (!cssVariable || !cssVariable.match(cssVariableRegex)) {\n    if (passThrough) return cssVariable;\n    throw new PolishedError(73);\n  }\n\n  let variableValue;\n  /* eslint-disable */\n\n  /* istanbul ignore next */\n\n  if (document.documentElement !== null) {\n    variableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);\n  }\n  /* eslint-enable */\n\n\n  if (variableValue) {\n    return variableValue.trim();\n  } else {\n    throw new PolishedError(74);\n  }\n}\n\n// @private\nfunction capitalizeString(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst positionMap = ['Top', 'Right', 'Bottom', 'Left'];\n\nfunction generateProperty(property, position) {\n  if (!property) return position.toLowerCase();\n  const splitProperty = property.split('-');\n\n  if (splitProperty.length > 1) {\n    splitProperty.splice(1, 0, position);\n    return splitProperty.reduce((acc, val) => `${acc}${capitalizeString(val)}`);\n  }\n\n  const joinedProperty = property.replace(/([a-z])([A-Z])/g, `$1${position}$2`);\n  return property === joinedProperty ? `${property}${position}` : joinedProperty;\n}\n\nfunction generateStyles(property, valuesWithDefaults) {\n  const styles = {};\n\n  for (let i = 0; i < valuesWithDefaults.length; i += 1) {\n    if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {\n      styles[generateProperty(property, positionMap[i])] = valuesWithDefaults[i];\n    }\n  }\n\n  return styles;\n}\n/**\n * Enables shorthand for direction-based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\n\n\nfunction directionalProperty(property, ...values) {\n  //  prettier-ignore\n  const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values;\n  const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];\n  return generateStyles(property, valuesWithDefaults);\n}\n\n/**\n * Check if a string ends with something\n * @private\n */\nfunction endsWith (string, suffix) {\n  return string.substr(-suffix.length) === suffix;\n}\n\nconst cssRegex = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value minus its unit of measure.\n *\n * @deprecated - stripUnit's unitReturn functionality has been marked for deprecation in polished 4.0. It's functionality has been been moved to getValueAndUnit.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': stripUnit('100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${stripUnit('100px')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100\n * }\n */\n\nfunction stripUnit(value, unitReturn) {\n  if (typeof value !== 'string') return unitReturn ? [value, undefined] : value;\n  const matchedValue = value.match(cssRegex);\n\n  if (unitReturn) {\n    // eslint-disable-next-line no-console\n    console.warn(\"stripUnit's unitReturn functionality has been marked for deprecation in polished 4.0. It's functionality has been been moved to getValueAndUnit.\");\n    if (matchedValue) return [parseFloat(value), matchedValue[2]];\n    return [value, undefined];\n  }\n\n  if (matchedValue) return parseFloat(value);\n  return value;\n}\n\n/**\n * Factory function that creates pixel-to-x converters\n * @private\n */\n\nconst pxtoFactory = to => (pxval, base = '16px') => {\n  let newPxval = pxval;\n  let newBase = base;\n\n  if (typeof pxval === 'string') {\n    if (!endsWith(pxval, 'px')) {\n      throw new PolishedError(69, to, pxval);\n    }\n\n    newPxval = stripUnit(pxval);\n  }\n\n  if (typeof base === 'string') {\n    if (!endsWith(base, 'px')) {\n      throw new PolishedError(70, to, base);\n    }\n\n    newBase = stripUnit(base);\n  }\n\n  if (typeof newPxval === 'string') {\n    throw new PolishedError(71, pxval, to);\n  }\n\n  if (typeof newBase === 'string') {\n    throw new PolishedError(72, base, to);\n  }\n\n  return `${newPxval / newBase}${to}`;\n};\n\n/**\n * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': em('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${em('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1em'\n * }\n */\n\nconst em = /*#__PURE__*/pxtoFactory('em');\n\nconst cssRegex$1 = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value and its unit as elements of an array.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': getValueAndUnit('100px')[0],\n *   '--unit': getValueAndUnit('100px')[1],\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${getValueAndUnit('100px')[0]};\n *   --unit: ${getValueAndUnit('100px')[1]};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100,\n *   '--unit': 'px',\n * }\n */\n\nfunction getValueAndUnit(value) {\n  if (typeof value !== 'string') return [value, ''];\n  const matchedValue = value.match(cssRegex$1);\n  if (matchedValue) return [parseFloat(value), matchedValue[2]];\n  return [value, undefined];\n}\n\nconst ratioNames = {\n  minorSecond: 1.067,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 1.333,\n  augFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.618,\n  majorSixth: 1.667,\n  minorSeventh: 1.778,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 2.667,\n  majorTwelfth: 3,\n  doubleOctave: 4\n};\n\nfunction getRatio(ratioName) {\n  return ratioNames[ratioName];\n}\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing an em or rem value up or down a defined scale. We provide a list of commonly used scales as pre-defined variables.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'fontSize': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   fontSize: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'fontSize': '1.77689em'\n * }\n */\n\n\nfunction modularScale(steps, base = '1em', ratio = 1.333) {\n  if (typeof steps !== 'number') {\n    throw new PolishedError(42);\n  }\n\n  if (typeof ratio === 'string' && !ratioNames[ratio]) {\n    throw new PolishedError(43);\n  }\n\n  const [realBase, unit] = typeof base === 'string' ? getValueAndUnit(base) : [base, ''];\n  const realRatio = typeof ratio === 'string' ? getRatio(ratio) : ratio;\n\n  if (typeof realBase === 'string') {\n    throw new PolishedError(44, base);\n  }\n\n  return `${realBase * realRatio ** steps}${unit || ''}`;\n}\n\n/**\n * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': rem('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${rem('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1rem'\n * }\n */\n\nconst rem = /*#__PURE__*/pxtoFactory('rem');\n\n/**\n * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: between('20px', '100px', '400px', '1000px'),\n *   fontSize: between('20px', '100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${between('20px', '100px', '400px', '1000px')};\n *   fontSize: ${between('20px', '100px')}\n * `\n *\n * // CSS as JS Output\n *\n * h1: {\n *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',\n *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'\n * }\n */\n\nfunction between(fromSize, toSize, minScreen = '320px', maxScreen = '1200px') {\n  const [unitlessFromSize, fromSizeUnit] = getValueAndUnit(fromSize);\n  const [unitlessToSize, toSizeUnit] = getValueAndUnit(toSize);\n  const [unitlessMinScreen, minScreenUnit] = getValueAndUnit(minScreen);\n  const [unitlessMaxScreen, maxScreenUnit] = getValueAndUnit(maxScreen);\n\n  if (typeof unitlessMinScreen !== 'number' || typeof unitlessMaxScreen !== 'number' || !minScreenUnit || !maxScreenUnit || minScreenUnit !== maxScreenUnit) {\n    throw new PolishedError(47);\n  }\n\n  if (typeof unitlessFromSize !== 'number' || typeof unitlessToSize !== 'number' || fromSizeUnit !== toSizeUnit) {\n    throw new PolishedError(48);\n  }\n\n  const slope = (unitlessFromSize - unitlessToSize) / (unitlessMinScreen - unitlessMaxScreen);\n  const base = unitlessToSize - slope * unitlessMaxScreen;\n  return `calc(${base.toFixed(2)}${fromSizeUnit || ''} + ${(100 * slope).toFixed(2)}vw)`;\n}\n\n/**\n * CSS to contain a float (credit to CSSMojo).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...clearFix(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${clearFix()}\n * `\n *\n * // CSS as JS Output\n *\n * '&::after': {\n *   'clear': 'both',\n *   'content': '\"\"',\n *   'display': 'table'\n * }\n */\nfunction clearFix(parent = '&') {\n  const pseudoSelector = `${parent}::after`;\n  return {\n    [pseudoSelector]: {\n      clear: 'both',\n      content: '\"\"',\n      display: 'table'\n    }\n  };\n}\n\n/**\n * CSS to fully cover an area. Can optionally be passed an offset to act as a \"padding\".\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...cover()\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${cover()}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'position': 'absolute',\n *   'top': '0',\n *   'right: '0',\n *   'bottom': '0',\n *   'left: '0'\n * }\n */\nfunction cover(offset = 0) {\n  return {\n    position: 'absolute',\n    top: offset,\n    right: offset,\n    bottom: offset,\n    left: offset\n  };\n}\n\n/**\n * CSS to represent truncated text with an ellipsis.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis('250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis('250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'maxWidth': '250px',\n *   'overflow': 'hidden',\n *   'textOverflow': 'ellipsis',\n *   'whiteSpace': 'nowrap',\n *   'wordWrap': 'normal'\n * }\n */\nfunction ellipsis(width = '100%') {\n  return {\n    display: 'inline-block',\n    maxWidth: width,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal'\n  };\n}\n\n/**\n * Returns a set of media queries that resizes a property (or set of properties) between a provided fromSize and toSize. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px') to constrain the interpolation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...fluidRange(\n *    {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${fluidRange(\n *      {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   \"@media (min-width: 1000px)\": Object {\n *     \"padding\": \"100px\",\n *   },\n *   \"@media (min-width: 400px)\": Object {\n *     \"padding\": \"calc(-33.33333333333334px + 13.333333333333334vw)\",\n *   },\n *   \"padding\": \"20px\",\n * }\n */\nfunction fluidRange(cssProp, minScreen = '320px', maxScreen = '1200px') {\n  if (!Array.isArray(cssProp) && typeof cssProp !== 'object' || cssProp === null) {\n    throw new PolishedError(49);\n  }\n\n  if (Array.isArray(cssProp)) {\n    const mediaQueries = {};\n    const fallbacks = {};\n\n    for (const obj of cssProp) {\n      if (!obj.prop || !obj.fromSize || !obj.toSize) {\n        throw new PolishedError(50);\n      }\n\n      fallbacks[obj.prop] = obj.fromSize;\n      mediaQueries[`@media (min-width: ${minScreen})`] = _extends({}, mediaQueries[`@media (min-width: ${minScreen})`], {\n        [obj.prop]: between(obj.fromSize, obj.toSize, minScreen, maxScreen)\n      });\n      mediaQueries[`@media (min-width: ${maxScreen})`] = _extends({}, mediaQueries[`@media (min-width: ${maxScreen})`], {\n        [obj.prop]: obj.toSize\n      });\n    }\n\n    return _extends({}, fallbacks, {}, mediaQueries);\n  } else {\n    if (!cssProp.prop || !cssProp.fromSize || !cssProp.toSize) {\n      throw new PolishedError(51);\n    }\n\n    return {\n      [cssProp.prop]: cssProp.fromSize,\n      [`@media (min-width: ${minScreen})`]: {\n        [cssProp.prop]: between(cssProp.fromSize, cssProp.toSize, minScreen, maxScreen)\n      },\n      [`@media (min-width: ${maxScreen})`]: {\n        [cssProp.prop]: cssProp.toSize\n      }\n    };\n  }\n}\n\nconst dataURIRegex = /^\\s*data:([a-z]+\\/[a-z-]+(;[a-z-]+=[a-z-]+)?)?(;charset=[a-z0-9-]+)?(;base64)?,[a-z0-9!$&',()*+,;=\\-._~:@/?%\\s]*\\s*$/i;\nconst formatHintMap = {\n  woff: 'woff',\n  woff2: 'woff2',\n  ttf: 'truetype',\n  otf: 'opentype',\n  eot: 'embedded-opentype',\n  svg: 'svg',\n  svgz: 'svg'\n};\n\nfunction generateFormatHint(format, formatHint) {\n  if (!formatHint) return '';\n  return ` format(\"${formatHintMap[format]}\")`;\n}\n\nfunction isDataURI(fontFilePath) {\n  return !!fontFilePath.match(dataURIRegex);\n}\n\nfunction generateFileReferences(fontFilePath, fileFormats, formatHint) {\n  if (isDataURI(fontFilePath)) {\n    return `url(\"${fontFilePath}\")${generateFormatHint(fileFormats[0], formatHint)}`;\n  }\n\n  const fileFontReferences = fileFormats.map(format => `url(\"${fontFilePath}.${format}\")${generateFormatHint(format, formatHint)}`);\n  return fileFontReferences.join(', ');\n}\n\nfunction generateLocalReferences(localFonts) {\n  const localFontReferences = localFonts.map(font => `local(\"${font}\")`);\n  return localFontReferences.join(', ');\n}\n\nfunction generateSources(fontFilePath, localFonts, fileFormats, formatHint) {\n  const fontReferences = [];\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\n\n  if (fontFilePath) {\n    fontReferences.push(generateFileReferences(fontFilePath, fileFormats, formatHint));\n  }\n\n  return fontReferences.join(', ');\n}\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro',\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * const GlobalStyle = createGlobalStyle`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro',\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'fontFamily': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\n\nfunction fontFace({\n  fontFamily,\n  fontFilePath,\n  fontStretch,\n  fontStyle,\n  fontVariant,\n  fontWeight,\n  fileFormats = ['eot', 'woff2', 'woff', 'ttf', 'svg'],\n  formatHint = false,\n  localFonts,\n  unicodeRange,\n  fontDisplay,\n  fontVariationSettings,\n  fontFeatureSettings\n}) {\n  // Error Handling\n  if (!fontFamily) throw new PolishedError(55);\n\n  if (!fontFilePath && !localFonts) {\n    throw new PolishedError(52);\n  }\n\n  if (localFonts && !Array.isArray(localFonts)) {\n    throw new PolishedError(53);\n  }\n\n  if (!Array.isArray(fileFormats)) {\n    throw new PolishedError(54);\n  }\n\n  const fontFaceDeclaration = {\n    '@font-face': {\n      fontFamily,\n      src: generateSources(fontFilePath, localFonts, fileFormats, formatHint),\n      unicodeRange,\n      fontStretch,\n      fontStyle,\n      fontVariant,\n      fontWeight,\n      fontDisplay,\n      fontVariationSettings,\n      fontFeatureSettings\n    }\n  }; // Removes undefined fields for cleaner css object.\n\n  return JSON.parse(JSON.stringify(fontFaceDeclaration));\n}\n\n/**\n * CSS to hide text to show a background image in a SEO-friendly way.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'backgroundImage': 'url(logo.png)',\n *   ...hideText(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   backgroundImage: url(logo.png);\n *   ${hideText()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'backgroundImage': 'url(logo.png)',\n *   'textIndent': '101%',\n *   'overflow': 'hidden',\n *   'whiteSpace': 'nowrap',\n * }\n */\nfunction hideText() {\n  return {\n    textIndent: '101%',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  };\n}\n\n/**\n * CSS to hide content visually but remain accessible to screen readers.\n * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...hideVisually(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hideVisually()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'border': '0',\n *   'clip': 'rect(0 0 0 0)',\n *   'height': '1px',\n *   'margin': '-1px',\n *   'overflow': 'hidden',\n *   'padding': '0',\n *   'position': 'absolute',\n *   'whiteSpace': 'nowrap',\n *   'width': '1px',\n * }\n */\nfunction hideVisually() {\n  return {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    whiteSpace: 'nowrap',\n    width: '1px'\n  };\n}\n\n/**\n * Generates a media query to target HiDPI devices.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  [hiDPI(1.5)]: {\n *    width: 200px;\n *  }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hiDPI(1.5)} {\n *     width: 200px;\n *   }\n * `\n *\n * // CSS as JS Output\n *\n * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n *  only screen and (min--moz-device-pixel-ratio: 1.5),\n *  only screen and (-o-min-device-pixel-ratio: 1.5/1),\n *  only screen and (min-resolution: 144dpi),\n *  only screen and (min-resolution: 1.5dppx)': {\n *   'width': '200px',\n * }\n */\nfunction hiDPI(ratio = 1.3) {\n  return `\n    @media only screen and (-webkit-min-device-pixel-ratio: ${ratio}),\n    only screen and (min--moz-device-pixel-ratio: ${ratio}),\n    only screen and (-o-min-device-pixel-ratio: ${ratio}/1),\n    only screen and (min-resolution: ${Math.round(ratio * 96)}dpi),\n    only screen and (min-resolution: ${ratio}dppx)\n  `;\n}\n\nfunction constructGradientValue(literals, ...substitutions) {\n  let template = '';\n\n  for (let i = 0; i < literals.length; i += 1) {\n    template += literals[i];\n\n    if (i === substitutions.length - 1 && substitutions[i]) {\n      const definedValues = substitutions.filter(substitute => !!substitute); // Adds leading coma if properties preceed color-stops\n\n      if (definedValues.length > 1) {\n        template = template.slice(0, -1);\n        template += `, ${substitutions[i]}`; // No trailing space if color-stops is the only param provided\n      } else if (definedValues.length === 1) {\n        template += `${substitutions[i]}`;\n      }\n    } else if (substitutions[i]) {\n      template += `${substitutions[i]} `;\n    }\n  }\n\n  return template.trim();\n}\n\nlet _ = t => t,\n    _t;\n\n/**\n * CSS for declaring a linear gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#FFF',\n *   'backgroundImage': 'linear-gradient(to top right, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\nfunction linearGradient({\n  colorStops,\n  fallback,\n  toDirection = ''\n}) {\n  if (!colorStops || colorStops.length < 2) {\n    throw new PolishedError(56);\n  }\n\n  return {\n    backgroundColor: fallback || colorStops[0].split(' ')[0],\n    backgroundImage: constructGradientValue(_t || (_t = _`linear-gradient(${0}${0})`), toDirection, colorStops.join(', '))\n  };\n}\n\n/**\n * CSS to normalize abnormalities across browsers (normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...normalize(),\n * }\n *\n * // styled-components usage\n * const GlobalStyle = createGlobalStyle`${normalize()}`\n *\n * // CSS as JS Output\n *\n * html {\n *   lineHeight: 1.15,\n *   textSizeAdjust: 100%,\n * } ...\n */\nfunction normalize() {\n  return [{\n    html: {\n      lineHeight: '1.15',\n      textSizeAdjust: '100%'\n    },\n    body: {\n      margin: '0'\n    },\n    h1: {\n      fontSize: '2em',\n      margin: '0.67em 0'\n    },\n    hr: {\n      boxSizing: 'content-box',\n      height: '0',\n      overflow: 'visible'\n    },\n    pre: {\n      fontFamily: 'monospace, monospace',\n      fontSize: '1em'\n    },\n    a: {\n      backgroundColor: 'transparent'\n    },\n    'abbr[title]': {\n      borderBottom: 'none',\n      textDecoration: 'underline'\n    },\n    [`b,\n    strong`]: {\n      fontWeight: 'bolder'\n    },\n    [`code,\n    kbd,\n    samp`]: {\n      fontFamily: 'monospace, monospace',\n      fontSize: '1em'\n    },\n    small: {\n      fontSize: '80%'\n    },\n    [`sub,\n    sup`]: {\n      fontSize: '75%',\n      lineHeight: '0',\n      position: 'relative',\n      verticalAlign: 'baseline'\n    },\n    sub: {\n      bottom: '-0.25em'\n    },\n    sup: {\n      top: '-0.5em'\n    },\n    img: {\n      borderStyle: 'none'\n    },\n    [`button,\n    input,\n    optgroup,\n    select,\n    textarea`]: {\n      fontFamily: 'inherit',\n      fontSize: '100%',\n      lineHeight: '1.15',\n      margin: '0'\n    },\n    [`button,\n    input`]: {\n      overflow: 'visible'\n    },\n    [`button,\n    select`]: {\n      textTransform: 'none'\n    },\n    [`button,\n    html [type=\"button\"],\n    [type=\"reset\"],\n    [type=\"submit\"]`]: {\n      WebkitAppearance: 'button'\n    },\n    [`button::-moz-focus-inner,\n    [type=\"button\"]::-moz-focus-inner,\n    [type=\"reset\"]::-moz-focus-inner,\n    [type=\"submit\"]::-moz-focus-inner`]: {\n      borderStyle: 'none',\n      padding: '0'\n    },\n    [`button:-moz-focusring,\n    [type=\"button\"]:-moz-focusring,\n    [type=\"reset\"]:-moz-focusring,\n    [type=\"submit\"]:-moz-focusring`]: {\n      outline: '1px dotted ButtonText'\n    },\n    fieldset: {\n      padding: '0.35em 0.625em 0.75em'\n    },\n    legend: {\n      boxSizing: 'border-box',\n      color: 'inherit',\n      display: 'table',\n      maxWidth: '100%',\n      padding: '0',\n      whiteSpace: 'normal'\n    },\n    progress: {\n      verticalAlign: 'baseline'\n    },\n    textarea: {\n      overflow: 'auto'\n    },\n    [`[type=\"checkbox\"],\n    [type=\"radio\"]`]: {\n      boxSizing: 'border-box',\n      padding: '0'\n    },\n    [`[type=\"number\"]::-webkit-inner-spin-button,\n    [type=\"number\"]::-webkit-outer-spin-button`]: {\n      height: 'auto'\n    },\n    '[type=\"search\"]': {\n      WebkitAppearance: 'textfield',\n      outlineOffset: '-2px'\n    },\n    '[type=\"search\"]::-webkit-search-decoration': {\n      WebkitAppearance: 'none'\n    },\n    '::-webkit-file-upload-button': {\n      WebkitAppearance: 'button',\n      font: 'inherit'\n    },\n    details: {\n      display: 'block'\n    },\n    summary: {\n      display: 'list-item'\n    },\n    template: {\n      display: 'none'\n    },\n    '[hidden]': {\n      display: 'none'\n    }\n  }, {\n    'abbr[title]': {\n      textDecoration: 'underline dotted'\n    }\n  }];\n}\n\nlet _$1 = t => t,\n    _t$1;\n\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#00FFFF',\n *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\nfunction radialGradient({\n  colorStops,\n  extent = '',\n  fallback,\n  position = '',\n  shape = ''\n}) {\n  if (!colorStops || colorStops.length < 2) {\n    throw new PolishedError(57);\n  }\n\n  return {\n    backgroundColor: fallback || colorStops[0].split(' ')[0],\n    backgroundImage: constructGradientValue(_t$1 || (_t$1 = _$1`radial-gradient(${0}${0}${0}${0})`), position, shape, extent, colorStops.join(', '))\n  };\n}\n\n/**\n * A helper to generate a retina background image and non-retina\n * background image. The retina background image will output to a HiDPI media query. The mixin uses\n * a _2x.png filename suffix by default.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  ...retinaImage('my-img')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${retinaImage('my-img')}\n * `\n *\n * // CSS as JS Output\n * div {\n *   backgroundImage: 'url(my-img.png)',\n *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n *    only screen and (min--moz-device-pixel-ratio: 1.3),\n *    only screen and (-o-min-device-pixel-ratio: 1.3/1),\n *    only screen and (min-resolution: 144dpi),\n *    only screen and (min-resolution: 1.5dppx)': {\n *     backgroundImage: 'url(my-img_2x.png)',\n *   }\n * }\n */\nfunction retinaImage(filename, backgroundSize, extension = 'png', retinaFilename, retinaSuffix = '_2x') {\n  if (!filename) {\n    throw new PolishedError(58);\n  } // Replace the dot at the beginning of the passed extension if one exists\n\n\n  const ext = extension.replace(/^\\./, '');\n  const rFilename = retinaFilename ? `${retinaFilename}.${ext}` : `${filename}${retinaSuffix}.${ext}`;\n  return {\n    backgroundImage: `url(${filename}.${ext})`,\n    [hiDPI()]: _extends({\n      backgroundImage: `url(${rFilename})`\n    }, backgroundSize ? {\n      backgroundSize\n    } : {})\n  };\n}\n\n/* eslint-disable key-spacing */\nconst functionsMap = {\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n  easeInCirc: 'cubic-bezier(0.600,  0.040, 0.980, 0.335)',\n  easeInCubic: 'cubic-bezier(0.550,  0.055, 0.675, 0.190)',\n  easeInExpo: 'cubic-bezier(0.950,  0.050, 0.795, 0.035)',\n  easeInQuad: 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n  easeInQuart: 'cubic-bezier(0.895,  0.030, 0.685, 0.220)',\n  easeInQuint: 'cubic-bezier(0.755,  0.050, 0.855, 0.060)',\n  easeInSine: 'cubic-bezier(0.470,  0.000, 0.745, 0.715)',\n  easeOutBack: 'cubic-bezier(0.175,  0.885, 0.320, 1.275)',\n  easeOutCubic: 'cubic-bezier(0.215,  0.610, 0.355, 1.000)',\n  easeOutCirc: 'cubic-bezier(0.075,  0.820, 0.165, 1.000)',\n  easeOutExpo: 'cubic-bezier(0.190,  1.000, 0.220, 1.000)',\n  easeOutQuad: 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n  easeOutQuart: 'cubic-bezier(0.165,  0.840, 0.440, 1.000)',\n  easeOutQuint: 'cubic-bezier(0.230,  1.000, 0.320, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390,  0.575, 0.565, 1.000)',\n  easeInOutBack: 'cubic-bezier(0.680, -0.550, 0.265, 1.550)',\n  easeInOutCirc: 'cubic-bezier(0.785,  0.135, 0.150, 0.860)',\n  easeInOutCubic: 'cubic-bezier(0.645,  0.045, 0.355, 1.000)',\n  easeInOutExpo: 'cubic-bezier(1.000,  0.000, 0.000, 1.000)',\n  easeInOutQuad: 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n  easeInOutQuart: 'cubic-bezier(0.770,  0.000, 0.175, 1.000)',\n  easeInOutQuint: 'cubic-bezier(0.860,  0.000, 0.070, 1.000)',\n  easeInOutSine: 'cubic-bezier(0.445,  0.050, 0.550, 0.950)'\n};\n/* eslint-enable key-spacing */\n\nfunction getTimingFunction(functionName) {\n  return functionsMap[functionName];\n}\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */\n\n\nfunction timingFunctions(timingFunction) {\n  return getTimingFunction(timingFunction);\n}\n\nconst getBorderWidth = (pointingDirection, height, width) => {\n  const fullWidth = `${width[0]}${width[1] || ''}`;\n  const halfWidth = `${width[0] / 2}${width[1] || ''}`;\n  const fullHeight = `${height[0]}${height[1] || ''}`;\n  const halfHeight = `${height[0] / 2}${height[1] || ''}`;\n\n  switch (pointingDirection) {\n    case 'top':\n      return `0 ${halfWidth} ${fullHeight} ${halfWidth}`;\n\n    case 'topLeft':\n      return `${fullWidth} ${fullHeight} 0 0`;\n\n    case 'left':\n      return `${halfHeight} ${fullWidth} ${halfHeight} 0`;\n\n    case 'bottomLeft':\n      return `${fullWidth} 0 0 ${fullHeight}`;\n\n    case 'bottom':\n      return `${fullHeight} ${halfWidth} 0 ${halfWidth}`;\n\n    case 'bottomRight':\n      return `0 0 ${fullWidth} ${fullHeight}`;\n\n    case 'right':\n      return `${halfHeight} 0 ${halfHeight} ${fullWidth}`;\n\n    case 'topRight':\n    default:\n      return `0 ${fullWidth} ${fullHeight} 0`;\n  }\n};\n\nconst getBorderColor = (pointingDirection, foregroundColor, backgroundColor) => {\n  switch (pointingDirection) {\n    case 'top':\n    case 'bottomRight':\n      return `${backgroundColor} ${backgroundColor} ${foregroundColor} ${backgroundColor}`;\n\n    case 'right':\n    case 'bottomLeft':\n      return `${backgroundColor} ${backgroundColor} ${backgroundColor} ${foregroundColor}`;\n\n    case 'bottom':\n    case 'topLeft':\n      return `${foregroundColor} ${backgroundColor} ${backgroundColor} ${backgroundColor}`;\n\n    case 'left':\n    case 'topRight':\n      return `${backgroundColor} ${foregroundColor} ${backgroundColor} ${backgroundColor}`;\n\n    default:\n      throw new PolishedError(59);\n  }\n};\n/**\n * CSS to represent triangle with any pointing direction with an optional background color.\n *\n * @example\n * // Styles as object usage\n *\n * const styles = {\n *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })\n * }\n *\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *  'borderColor': 'transparent transparent transparent red',\n *  'borderStyle': 'solid',\n *  'borderWidth': '50px 0 50px 100px',\n *  'height': '0',\n *  'width': '0',\n * }\n */\n\n\nfunction triangle({\n  pointingDirection,\n  height,\n  width,\n  foregroundColor,\n  backgroundColor = 'transparent'\n}) {\n  const widthAndUnit = getValueAndUnit(width);\n  const heightAndUnit = getValueAndUnit(height);\n\n  if (isNaN(heightAndUnit[0]) || isNaN(widthAndUnit[0])) {\n    throw new PolishedError(60);\n  }\n\n  return {\n    width: '0',\n    height: '0',\n    borderColor: getBorderColor(pointingDirection, foregroundColor, backgroundColor),\n    borderStyle: 'solid',\n    borderWidth: getBorderWidth(pointingDirection, heightAndUnit, widthAndUnit)\n  };\n}\n\n/**\n * Provides an easy way to change the `wordWrap` property.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...wordWrap('break-word')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${wordWrap('break-word')}\n * `\n *\n * // CSS as JS Output\n *\n * const styles = {\n *   overflowWrap: 'break-word',\n *   wordWrap: 'break-word',\n *   wordBreak: 'break-all',\n * }\n */\nfunction wordWrap(wrap = 'break-word') {\n  const wordBreak = wrap === 'break-word' ? 'break-all' : wrap;\n  return {\n    overflowWrap: wrap,\n    wordWrap: wrap,\n    wordBreak\n  };\n}\n\nfunction colorToInt(color) {\n  return Math.round(color * 255);\n}\n\nfunction convertToInt(red, green, blue) {\n  return `${colorToInt(red)},${colorToInt(green)},${colorToInt(blue)}`;\n}\n\nfunction hslToRgb(hue, saturation, lightness, convert = convertToInt) {\n  if (saturation === 0) {\n    // achromatic\n    return convert(lightness, lightness, lightness);\n  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n\n\n  const huePrime = (hue % 360 + 360) % 360 / 60;\n  const chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;\n  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = lightness - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n  return convert(finalRed, finalGreen, finalBlue);\n}\n\nconst namedColorMap = {\n  aliceblue: 'f0f8ff',\n  antiquewhite: 'faebd7',\n  aqua: '00ffff',\n  aquamarine: '7fffd4',\n  azure: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '000',\n  blanchedalmond: 'ffebcd',\n  blue: '0000ff',\n  blueviolet: '8a2be2',\n  brown: 'a52a2a',\n  burlywood: 'deb887',\n  cadetblue: '5f9ea0',\n  chartreuse: '7fff00',\n  chocolate: 'd2691e',\n  coral: 'ff7f50',\n  cornflowerblue: '6495ed',\n  cornsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: '00ffff',\n  darkblue: '00008b',\n  darkcyan: '008b8b',\n  darkgoldenrod: 'b8860b',\n  darkgray: 'a9a9a9',\n  darkgreen: '006400',\n  darkgrey: 'a9a9a9',\n  darkkhaki: 'bdb76b',\n  darkmagenta: '8b008b',\n  darkolivegreen: '556b2f',\n  darkorange: 'ff8c00',\n  darkorchid: '9932cc',\n  darkred: '8b0000',\n  darksalmon: 'e9967a',\n  darkseagreen: '8fbc8f',\n  darkslateblue: '483d8b',\n  darkslategray: '2f4f4f',\n  darkslategrey: '2f4f4f',\n  darkturquoise: '00ced1',\n  darkviolet: '9400d3',\n  deeppink: 'ff1493',\n  deepskyblue: '00bfff',\n  dimgray: '696969',\n  dimgrey: '696969',\n  dodgerblue: '1e90ff',\n  firebrick: 'b22222',\n  floralwhite: 'fffaf0',\n  forestgreen: '228b22',\n  fuchsia: 'ff00ff',\n  gainsboro: 'dcdcdc',\n  ghostwhite: 'f8f8ff',\n  gold: 'ffd700',\n  goldenrod: 'daa520',\n  gray: '808080',\n  green: '008000',\n  greenyellow: 'adff2f',\n  grey: '808080',\n  honeydew: 'f0fff0',\n  hotpink: 'ff69b4',\n  indianred: 'cd5c5c',\n  indigo: '4b0082',\n  ivory: 'fffff0',\n  khaki: 'f0e68c',\n  lavender: 'e6e6fa',\n  lavenderblush: 'fff0f5',\n  lawngreen: '7cfc00',\n  lemonchiffon: 'fffacd',\n  lightblue: 'add8e6',\n  lightcoral: 'f08080',\n  lightcyan: 'e0ffff',\n  lightgoldenrodyellow: 'fafad2',\n  lightgray: 'd3d3d3',\n  lightgreen: '90ee90',\n  lightgrey: 'd3d3d3',\n  lightpink: 'ffb6c1',\n  lightsalmon: 'ffa07a',\n  lightseagreen: '20b2aa',\n  lightskyblue: '87cefa',\n  lightslategray: '789',\n  lightslategrey: '789',\n  lightsteelblue: 'b0c4de',\n  lightyellow: 'ffffe0',\n  lime: '0f0',\n  limegreen: '32cd32',\n  linen: 'faf0e6',\n  magenta: 'f0f',\n  maroon: '800000',\n  mediumaquamarine: '66cdaa',\n  mediumblue: '0000cd',\n  mediumorchid: 'ba55d3',\n  mediumpurple: '9370db',\n  mediumseagreen: '3cb371',\n  mediumslateblue: '7b68ee',\n  mediumspringgreen: '00fa9a',\n  mediumturquoise: '48d1cc',\n  mediumvioletred: 'c71585',\n  midnightblue: '191970',\n  mintcream: 'f5fffa',\n  mistyrose: 'ffe4e1',\n  moccasin: 'ffe4b5',\n  navajowhite: 'ffdead',\n  navy: '000080',\n  oldlace: 'fdf5e6',\n  olive: '808000',\n  olivedrab: '6b8e23',\n  orange: 'ffa500',\n  orangered: 'ff4500',\n  orchid: 'da70d6',\n  palegoldenrod: 'eee8aa',\n  palegreen: '98fb98',\n  paleturquoise: 'afeeee',\n  palevioletred: 'db7093',\n  papayawhip: 'ffefd5',\n  peachpuff: 'ffdab9',\n  peru: 'cd853f',\n  pink: 'ffc0cb',\n  plum: 'dda0dd',\n  powderblue: 'b0e0e6',\n  purple: '800080',\n  rebeccapurple: '639',\n  red: 'f00',\n  rosybrown: 'bc8f8f',\n  royalblue: '4169e1',\n  saddlebrown: '8b4513',\n  salmon: 'fa8072',\n  sandybrown: 'f4a460',\n  seagreen: '2e8b57',\n  seashell: 'fff5ee',\n  sienna: 'a0522d',\n  silver: 'c0c0c0',\n  skyblue: '87ceeb',\n  slateblue: '6a5acd',\n  slategray: '708090',\n  slategrey: '708090',\n  snow: 'fffafa',\n  springgreen: '00ff7f',\n  steelblue: '4682b4',\n  tan: 'd2b48c',\n  teal: '008080',\n  thistle: 'd8bfd8',\n  tomato: 'ff6347',\n  turquoise: '40e0d0',\n  violet: 'ee82ee',\n  wheat: 'f5deb3',\n  white: 'fff',\n  whitesmoke: 'f5f5f5',\n  yellow: 'ff0',\n  yellowgreen: '9acd32'\n};\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n * @private\n */\n\nfunction nameToHex(color) {\n  if (typeof color !== 'string') return color;\n  const normalizedColorName = color.toLowerCase();\n  return namedColorMap[normalizedColorName] ? `#${namedColorMap[normalizedColorName]}` : color;\n}\n\nconst hexRegex = /^#[a-fA-F0-9]{6}$/;\nconst hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;\nconst reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nconst reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;\nconst rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i;\nconst rgbaRegex = /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\nconst hslRegex = /^hsl\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*\\)$/i;\nconst hslaRegex = /^hsla\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = parseToRgb('rgb(255, 0, 0)');\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');\n */\n\nfunction parseToRgb(color) {\n  if (typeof color !== 'string') {\n    throw new PolishedError(3);\n  }\n\n  const normalizedColor = nameToHex(color);\n\n  if (normalizedColor.match(hexRegex)) {\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[2]}`, 16),\n      green: parseInt(`${normalizedColor[3]}${normalizedColor[4]}`, 16),\n      blue: parseInt(`${normalizedColor[5]}${normalizedColor[6]}`, 16)\n    };\n  }\n\n  if (normalizedColor.match(hexRgbaRegex)) {\n    const alpha = parseFloat((parseInt(`${normalizedColor[7]}${normalizedColor[8]}`, 16) / 255).toFixed(2));\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[2]}`, 16),\n      green: parseInt(`${normalizedColor[3]}${normalizedColor[4]}`, 16),\n      blue: parseInt(`${normalizedColor[5]}${normalizedColor[6]}`, 16),\n      alpha\n    };\n  }\n\n  if (normalizedColor.match(reducedHexRegex)) {\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[1]}`, 16),\n      green: parseInt(`${normalizedColor[2]}${normalizedColor[2]}`, 16),\n      blue: parseInt(`${normalizedColor[3]}${normalizedColor[3]}`, 16)\n    };\n  }\n\n  if (normalizedColor.match(reducedRgbaHexRegex)) {\n    const alpha = parseFloat((parseInt(`${normalizedColor[4]}${normalizedColor[4]}`, 16) / 255).toFixed(2));\n    return {\n      red: parseInt(`${normalizedColor[1]}${normalizedColor[1]}`, 16),\n      green: parseInt(`${normalizedColor[2]}${normalizedColor[2]}`, 16),\n      blue: parseInt(`${normalizedColor[3]}${normalizedColor[3]}`, 16),\n      alpha\n    };\n  }\n\n  const rgbMatched = rgbRegex.exec(normalizedColor);\n\n  if (rgbMatched) {\n    return {\n      red: parseInt(`${rgbMatched[1]}`, 10),\n      green: parseInt(`${rgbMatched[2]}`, 10),\n      blue: parseInt(`${rgbMatched[3]}`, 10)\n    };\n  }\n\n  const rgbaMatched = rgbaRegex.exec(normalizedColor);\n\n  if (rgbaMatched) {\n    return {\n      red: parseInt(`${rgbaMatched[1]}`, 10),\n      green: parseInt(`${rgbaMatched[2]}`, 10),\n      blue: parseInt(`${rgbaMatched[3]}`, 10),\n      alpha: parseFloat(`${rgbaMatched[4]}`)\n    };\n  }\n\n  const hslMatched = hslRegex.exec(normalizedColor);\n\n  if (hslMatched) {\n    const hue = parseInt(`${hslMatched[1]}`, 10);\n    const saturation = parseInt(`${hslMatched[2]}`, 10) / 100;\n    const lightness = parseInt(`${hslMatched[3]}`, 10) / 100;\n    const rgbColorString = `rgb(${hslToRgb(hue, saturation, lightness)})`;\n    const hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new PolishedError(4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(`${hslRgbMatched[1]}`, 10),\n      green: parseInt(`${hslRgbMatched[2]}`, 10),\n      blue: parseInt(`${hslRgbMatched[3]}`, 10)\n    };\n  }\n\n  const hslaMatched = hslaRegex.exec(normalizedColor);\n\n  if (hslaMatched) {\n    const hue = parseInt(`${hslaMatched[1]}`, 10);\n    const saturation = parseInt(`${hslaMatched[2]}`, 10) / 100;\n    const lightness = parseInt(`${hslaMatched[3]}`, 10) / 100;\n    const rgbColorString = `rgb(${hslToRgb(hue, saturation, lightness)})`;\n    const hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new PolishedError(4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(`${hslRgbMatched[1]}`, 10),\n      green: parseInt(`${hslRgbMatched[2]}`, 10),\n      blue: parseInt(`${hslRgbMatched[3]}`, 10),\n      alpha: parseFloat(`${hslaMatched[4]}`)\n    };\n  }\n\n  throw new PolishedError(5);\n}\n\nfunction rgbToHsl(color) {\n  // make sure rgb are contained in a set of [0, 255]\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  if (max === min) {\n    // achromatic\n    if (color.alpha !== undefined) {\n      return {\n        hue: 0,\n        saturation: 0,\n        lightness,\n        alpha: color.alpha\n      };\n    } else {\n      return {\n        hue: 0,\n        saturation: 0,\n        lightness\n      };\n    }\n  }\n\n  let hue;\n  const delta = max - min;\n  const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  switch (max) {\n    case red:\n      hue = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      hue = (blue - red) / delta + 2;\n      break;\n\n    default:\n      // blue case\n      hue = (red - green) / delta + 4;\n      break;\n  }\n\n  hue *= 60;\n\n  if (color.alpha !== undefined) {\n    return {\n      hue,\n      saturation,\n      lightness,\n      alpha: color.alpha\n    };\n  }\n\n  return {\n    hue,\n    saturation,\n    lightness\n  };\n}\n\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1\n * const color1 = parseToHsl('rgb(255, 0, 0)');\n * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2\n * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');\n */\nfunction parseToHsl(color) {\n  // Note: At a later stage we can optimize this function as right now a hsl\n  // color would be parsed converted to rgb values and converted back to hsl.\n  return rgbToHsl(parseToRgb(color));\n}\n\n/**\n * Reduces hex values if possible e.g. #ff8866 to #f86\n * @private\n */\nconst reduceHexValue = value => {\n  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {\n    return `#${value[1]}${value[3]}${value[5]}`;\n  }\n\n  return value;\n};\n\nfunction numberToHex(value) {\n  const hex = value.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction colorToHex(color) {\n  return numberToHex(Math.round(color * 255));\n}\n\nfunction convertToHex(red, green, blue) {\n  return reduceHexValue(`#${colorToHex(red)}${colorToHex(green)}${colorToHex(blue)}`);\n}\n\nfunction hslToHex(hue, saturation, lightness) {\n  return hslToRgb(hue, saturation, lightness, convertToHex);\n}\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsl(359, 0.75, 0.4),\n *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsl(359, 0.75, 0.4)};\n *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#b3191c\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsl(value, saturation, lightness) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number') {\n    return hslToHex(value, saturation, lightness);\n  } else if (typeof value === 'object' && saturation === undefined && lightness === undefined) {\n    return hslToHex(value.hue, value.saturation, value.lightness);\n  }\n\n  throw new PolishedError(1);\n}\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsla(359, 0.75, 0.4, 0.7),\n *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n *   background: hsla(359, 0.75, 0.4, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsla(359, 0.75, 0.4, 0.7)};\n *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n *   background: ${hsla(359, 0.75, 0.4, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsla(value, saturation, lightness, alpha) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number' && typeof alpha === 'number') {\n    return alpha >= 1 ? hslToHex(value, saturation, lightness) : `rgba(${hslToRgb(value, saturation, lightness)},${alpha})`;\n  } else if (typeof value === 'object' && saturation === undefined && lightness === undefined && alpha === undefined) {\n    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`;\n  }\n\n  throw new PolishedError(2);\n}\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgb(255, 205, 100),\n *   background: rgb({ red: 255, green: 205, blue: 100 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgb(255, 205, 100)};\n *   background: ${rgb({ red: 255, green: 205, blue: 100 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffcd64\";\n *   background: \"#ffcd64\";\n * }\n */\nfunction rgb(value, green, blue) {\n  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {\n    return reduceHexValue(`#${numberToHex(value)}${numberToHex(green)}${numberToHex(blue)}`);\n  } else if (typeof value === 'object' && green === undefined && blue === undefined) {\n    return reduceHexValue(`#${numberToHex(value.red)}${numberToHex(value.green)}${numberToHex(value.blue)}`);\n  }\n\n  throw new PolishedError(6);\n}\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgba(255, 205, 100, 0.7),\n *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n *   background: rgba(255, 205, 100, 1),\n *   background: rgba('#ffffff', 0.4),\n *   background: rgba('black', 0.7),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgba(255, 205, 100, 0.7)};\n *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n *   background: ${rgba(255, 205, 100, 1)};\n *   background: ${rgba('#ffffff', 0.4)};\n *   background: ${rgba('black', 0.7)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,255,255,0.4)\";\n *   background: \"rgba(0,0,0,0.7)\";\n * }\n */\nfunction rgba(firstValue, secondValue, thirdValue, fourthValue) {\n  if (typeof firstValue === 'string' && typeof secondValue === 'number') {\n    const rgbValue = parseToRgb(firstValue);\n    return `rgba(${rgbValue.red},${rgbValue.green},${rgbValue.blue},${secondValue})`;\n  } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {\n    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : `rgba(${firstValue},${secondValue},${thirdValue},${fourthValue})`;\n  } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {\n    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : `rgba(${firstValue.red},${firstValue.green},${firstValue.blue},${firstValue.alpha})`;\n  }\n\n  throw new PolishedError(7);\n}\n\nconst isRgb = color => typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n\nconst isRgba = color => typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && typeof color.alpha === 'number';\n\nconst isHsl = color => typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n\nconst isHsla = color => typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && typeof color.alpha === 'number';\n/**\n * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: toColorString({ red: 255, green: 205, blue: 100 }),\n *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */\n\n\nfunction toColorString(color) {\n  if (typeof color !== 'object') throw new PolishedError(8);\n  if (isRgba(color)) return rgba(color);\n  if (isRgb(color)) return rgb(color);\n  if (isHsla(color)) return hsla(color);\n  if (isHsl(color)) return hsl(color);\n  throw new PolishedError(8);\n}\n\n// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-redeclare\nfunction curried(f, length, acc) {\n  return function fn() {\n    // eslint-disable-next-line prefer-rest-params\n    const combined = acc.concat(Array.prototype.slice.call(arguments));\n    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);\n  };\n} // eslint-disable-next-line no-redeclare\n\n\nfunction curry(f) {\n  // eslint-disable-line no-redeclare\n  return curried(f, f.length, []);\n}\n\n/**\n * Changes the hue of the color. Hue is a number between 0 to 360. The first\n * argument for adjustHue is the amount of degrees the color is rotated around\n * the color wheel, always producing a positive hue value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: adjustHue(180, '#448'),\n *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${adjustHue(180, '#448')};\n *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#888844\";\n *   background: \"rgba(136,136,68,0.7)\";\n * }\n */\n\nfunction adjustHue(degree, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: hslColor.hue + parseFloat(degree)\n  }));\n} // prettier-ignore\n\n\nconst curriedAdjustHue = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(adjustHue);\n\n/**\n * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: complement('#448'),\n *   background: complement('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${complement('#448')};\n *   background: ${complement('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#884\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\n\nfunction complement(color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: (hslColor.hue + 180) % 360\n  }));\n}\n\nfunction guard(lowerBoundary, upperBoundary, value) {\n  return Math.max(lowerBoundary, Math.min(upperBoundary, value));\n}\n\n/**\n * Returns a string value for the darkened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: darken(0.2, '#FFCD64'),\n *   background: darken('0.2', 'rgba(255,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${darken(0.2, '#FFCD64')};\n *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffbd31\";\n *   background: \"rgba(255,189,49,0.7)\";\n * }\n */\n\nfunction darken(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedDarken = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(darken);\n\n/**\n * Decreases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the desaturate function is the amount by how much the color\n * intensity should be decreased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: desaturate(0.2, '#CCCD64'),\n *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${desaturate(0.2, '#CCCD64')};\n *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#b8b979\";\n *   background: \"rgba(184,185,121,0.7)\";\n * }\n */\n\nfunction desaturate(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedDesaturate = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(desaturate);\n\n/**\n * Returns a number (float) representing the luminance of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',\n *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)',\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};\n *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)'};\n *\n * // CSS in JS Output\n *\n * div {\n *   background: \"#CCCD64\";\n *   background: \"rgba(58, 133, 255, 1)\";\n * }\n */\n\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  const rgbColor = parseToRgb(color);\n  const [r, g, b] = Object.keys(rgbColor).map(key => {\n    const channel = rgbColor[key] / 255;\n    return channel <= 0.03928 ? channel / 12.92 : ((channel + 0.055) / 1.055) ** 2.4;\n  });\n  return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));\n}\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n *\n * @example\n * const contrastRatio = getContrast('#444', '#fff');\n */\n\nfunction getContrast(color1, color2) {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n  return parseFloat((luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05)).toFixed(2));\n}\n\n/**\n * Converts the color to a grayscale, by reducing its saturation to 0.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: grayscale('#CCCD64'),\n *   background: grayscale('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${grayscale('#CCCD64')};\n *   background: ${grayscale('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#999\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\n\nfunction grayscale(color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: 0\n  }));\n}\n\n/**\n * Converts a HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */\nfunction hslToColorString(color) {\n  if (typeof color === 'object' && typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number') {\n    if (color.alpha && typeof color.alpha === 'number') {\n      return hsla({\n        hue: color.hue,\n        saturation: color.saturation,\n        lightness: color.lightness,\n        alpha: color.alpha\n      });\n    }\n\n    return hsl({\n      hue: color.hue,\n      saturation: color.saturation,\n      lightness: color.lightness\n    });\n  }\n\n  throw new PolishedError(45);\n}\n\n/**\n * Inverts the red, green and blue values of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: invert('#CCCD64'),\n *   background: invert('rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${invert('#CCCD64')};\n *   background: ${invert('rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#33329b\";\n *   background: \"rgba(154,155,50,0.7)\";\n * }\n */\n\nfunction invert(color) {\n  if (color === 'transparent') return color; // parse color string to rgb\n\n  const value = parseToRgb(color);\n  return toColorString(_extends({}, value, {\n    red: 255 - value.red,\n    green: 255 - value.green,\n    blue: 255 - value.blue\n  }));\n}\n\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */\n\nfunction lighten(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedLighten = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(lighten);\n\n/**\n * Determines which contrast guidelines have been met for two colors.\n * Based on the [contrast calculations recommended by W3](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html).\n *\n * @example\n * const scores = meetsContrastGuidelines('#444', '#fff');\n */\nfunction meetsContrastGuidelines(color1, color2) {\n  const contrastRatio = getContrast(color1, color2);\n  return {\n    AA: contrastRatio >= 4.5,\n    AALarge: contrastRatio >= 3,\n    AAA: contrastRatio >= 7,\n    AAALarge: contrastRatio >= 4.5\n  };\n}\n\n/**\n * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: mix(0.5, '#f00', '#00f')\n *   background: mix(0.25, '#f00', '#00f')\n *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${mix(0.5, '#f00', '#00f')};\n *   background: ${mix(0.25, '#f00', '#00f')};\n *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#7f007f\";\n *   background: \"#3f00bf\";\n *   background: \"rgba(63, 0, 191, 0.75)\";\n * }\n */\n\nfunction mix(weight, color, otherColor) {\n  if (color === 'transparent') return otherColor;\n  if (otherColor === 'transparent') return color;\n  if (weight === 0) return otherColor;\n  const parsedColor1 = parseToRgb(color);\n\n  const color1 = _extends({}, parsedColor1, {\n    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1\n  });\n\n  const parsedColor2 = parseToRgb(otherColor);\n\n  const color2 = _extends({}, parsedColor2, {\n    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1\n  }); // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n\n\n  const alphaDelta = color1.alpha - color2.alpha;\n  const x = parseFloat(weight) * 2 - 1;\n  const y = x * alphaDelta === -1 ? x : x + alphaDelta;\n  const z = 1 + x * alphaDelta;\n  const weight1 = (y / z + 1) / 2.0;\n  const weight2 = 1 - weight1;\n  const mixedColor = {\n    red: Math.floor(color1.red * weight1 + color2.red * weight2),\n    green: Math.floor(color1.green * weight1 + color2.green * weight2),\n    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),\n    alpha: color1.alpha * (parseFloat(weight) / 1.0) + color2.alpha * (1 - parseFloat(weight) / 1.0)\n  };\n  return rgba(mixedColor);\n} // prettier-ignore\n\n\nconst curriedMix = /*#__PURE__*/curry\n/* ::<number | string, string, string, string> */\n(mix);\n\n/**\n * Increases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');\n *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),\n *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};\n *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},\n *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#fff\";\n *   background: \"rgba(255,255,255,0.7)\";\n *   background: \"rgba(255,0,0,0.7)\";\n * }\n */\n\nfunction opacify(amount, color) {\n  if (color === 'transparent') return color;\n  const parsedColor = parseToRgb(color);\n  const alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n\n  const colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)\n  });\n\n  return rgba(colorWithAlpha);\n} // prettier-ignore\n\n\nconst curriedOpacify = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(opacify);\n\nconst defaultLightReturnColor = '#000';\nconst defaultDarkReturnColor = '#fff';\n/**\n * Returns black or white (or optional light and dark return colors) for best\n * contrast depending on the luminosity of the given color.\n * When passing custom return colors, set `strict` to `true` to ensure that the\n * return color always meets or exceeds WCAG level AA or greater. If this test\n * fails, the default return color (black or white) is returned in place of the\n * custom return color.\n *\n * Follows [W3C specs for readability](https://www.w3.org/TR/WCAG20-TECHS/G18.html).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   color: readableColor('#000'),\n *   color: readableColor('black', '#001', '#ff8'),\n *   color: readableColor('white', '#001', '#ff8'),\n *   color: readableColor('red', '#333', '#ddd', true)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   color: ${readableColor('#000')};\n *   color: ${readableColor('black', '#001', '#ff8')};\n *   color: ${readableColor('white', '#001', '#ff8')};\n *   color: ${readableColor('red', '#333', '#ddd', true)};\n * `\n *\n * // CSS in JS Output\n * element {\n *   color: \"#fff\";\n *   color: \"#ff8\";\n *   color: \"#001\";\n *   color: \"#000\";\n * }\n */\n\nfunction readableColor(color, lightReturnColor = defaultLightReturnColor, darkReturnColor = defaultDarkReturnColor, strict = false) {\n  const isLightColor = getLuminance(color) > 0.179;\n  const preferredReturnColor = isLightColor ? lightReturnColor : darkReturnColor; // TODO: Make `strict` the default behaviour in the next major release.\n  // Without `strict`, this may return a color that does not meet WCAG AA.\n\n  if (!strict || getContrast(color, preferredReturnColor) >= 4.5) {\n    return preferredReturnColor;\n  }\n\n  return isLightColor ? defaultLightReturnColor : defaultDarkReturnColor;\n}\n\n/**\n * Converts a RgbColor or RgbaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb` or `rgba`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100 }),\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n * }\n */\nfunction rgbToColorString(color) {\n  if (typeof color === 'object' && typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number') {\n    if (color.alpha && typeof color.alpha === 'number') {\n      return rgba({\n        red: color.red,\n        green: color.green,\n        blue: color.blue,\n        alpha: color.alpha\n      });\n    }\n\n    return rgb({\n      red: color.red,\n      green: color.green,\n      blue: color.blue\n    });\n  }\n\n  throw new PolishedError(46);\n}\n\n/**\n * Increases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the saturate function is the amount by how much the color\n * intensity should be increased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: saturate(0.2, '#CCCD64'),\n *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${saturate(0.2, '#FFCD64')};\n *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e0e250\";\n *   background: \"rgba(224,226,80,0.7)\";\n * }\n */\n\nfunction saturate(amount, color) {\n  if (color === 'transparent') return color;\n  const hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nconst curriedSaturate = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(saturate);\n\n/**\n * Sets the hue of a color to the provided value. The hue range can be\n * from 0 and 359.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setHue(42, '#CCCD64'),\n *   background: setHue('244', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setHue(42, '#CCCD64')};\n *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#cdae64\";\n *   background: \"rgba(107,100,205,0.7)\";\n * }\n */\n\nfunction setHue(hue, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    hue: parseFloat(hue)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetHue = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setHue);\n\n/**\n * Sets the lightness of a color to the provided value. The lightness range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setLightness(0.2, '#CCCD64'),\n *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setLightness(0.2, '#CCCD64')};\n *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#4d4d19\";\n *   background: \"rgba(223,224,159,0.7)\";\n * }\n */\n\nfunction setLightness(lightness, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    lightness: parseFloat(lightness)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetLightness = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setLightness);\n\n/**\n * Sets the saturation of a color to the provided value. The saturation range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setSaturation(0.2, '#CCCD64'),\n *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setSaturation(0.2, '#CCCD64')};\n *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#adad84\";\n *   background: \"rgba(228,229,76,0.7)\";\n * }\n */\n\nfunction setSaturation(saturation, color) {\n  if (color === 'transparent') return color;\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: parseFloat(saturation)\n  }));\n} // prettier-ignore\n\n\nconst curriedSetSaturation = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(setSaturation);\n\n/**\n * Shades a color by mixing it with black. `shade` can produce\n * hue shifts, where as `darken` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: shade(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${shade(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#00003f\";\n * }\n */\n\nfunction shade(percentage, color) {\n  if (color === 'transparent') return color;\n  return curriedMix(parseFloat(percentage), 'rgb(0, 0, 0)', color);\n} // prettier-ignore\n\n\nconst curriedShade = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(shade);\n\n/**\n * Tints a color by mixing it with white. `tint` can produce\n * hue shifts, where as `lighten` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: tint(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${tint(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#bfbfff\";\n * }\n */\n\nfunction tint(percentage, color) {\n  if (color === 'transparent') return color;\n  return curriedMix(parseFloat(percentage), 'rgb(255, 255, 255)', color);\n} // prettier-ignore\n\n\nconst curriedTint = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(tint);\n\n/**\n * Decreases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: transparentize(0.1, '#fff');\n *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${transparentize(0.1, '#fff')};\n *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */\n\nfunction transparentize(amount, color) {\n  if (color === 'transparent') return color;\n  const parsedColor = parseToRgb(color);\n  const alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n\n  const colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 - parseFloat(amount) * 100) / 100)\n  });\n\n  return rgba(colorWithAlpha);\n} // prettier-ignore\n\n\nconst curriedTransparentize = /*#__PURE__*/curry\n/* ::<number | string, string, string> */\n(transparentize);\n\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */\nfunction animation(...args) {\n  // Allow single or multiple animations passed\n  const multiMode = Array.isArray(args[0]);\n\n  if (!multiMode && args.length > 8) {\n    throw new PolishedError(64);\n  }\n\n  const code = args.map(arg => {\n    if (multiMode && !Array.isArray(arg) || !multiMode && Array.isArray(arg)) {\n      throw new PolishedError(65);\n    }\n\n    if (Array.isArray(arg) && arg.length > 8) {\n      throw new PolishedError(66);\n    }\n\n    return Array.isArray(arg) ? arg.join(' ') : arg;\n  }).join(', ');\n  return {\n    animation: code\n  };\n}\n\n/**\n * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'backgroundImage': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n * }\n */\nfunction backgroundImages(...properties) {\n  return {\n    backgroundImage: properties.join(', ')\n  };\n}\n\n/**\n * Shorthand that accepts any number of background values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n * }\n */\nfunction backgrounds(...properties) {\n  return {\n    background: properties.join(', ')\n  };\n}\n\nconst sideMap = ['top', 'right', 'bottom', 'left'];\n/**\n * Shorthand for the border property that splits out individual properties for use with tools like Fela and Styletron. A side keyword can optionally be passed to target only one side's border properties.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...border('1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderColor': 'red',\n *   'borderStyle': 'solid',\n *   'borderWidth': `1px`,\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...border('top', '1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('top', '1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderTopStyle': 'solid',\n *   'borderTopWidth': `1px`,\n * }\n */\n\nfunction border(sideKeyword, ...values) {\n  if (typeof sideKeyword === 'string' && sideMap.indexOf(sideKeyword) >= 0) {\n    return {\n      [`border${capitalizeString(sideKeyword)}Width`]: values[0],\n      [`border${capitalizeString(sideKeyword)}Style`]: values[1],\n      [`border${capitalizeString(sideKeyword)}Color`]: values[2]\n    };\n  } else {\n    values.unshift(sideKeyword);\n    return {\n      borderWidth: values[0],\n      borderStyle: values[1],\n      borderColor: values[2]\n    };\n  }\n}\n\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderColor('red', 'green', 'blue', 'yellow')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderColor('red', 'green', 'blue', 'yellow')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderRightColor': 'green',\n *   'borderBottomColor': 'blue',\n *   'borderLeftColor': 'yellow'\n * }\n */\nfunction borderColor(...values) {\n  return directionalProperty('borderColor', ...values);\n}\n\n/**\n * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderRadius('top', '5px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderRadius('top', '5px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopRightRadius': '5px',\n *   'borderTopLeftRadius': '5px',\n * }\n */\nfunction borderRadius(side, radius) {\n  const uppercaseSide = capitalizeString(side);\n\n  if (!radius && radius !== 0) {\n    throw new PolishedError(62);\n  }\n\n  if (uppercaseSide === 'Top' || uppercaseSide === 'Bottom') {\n    return {\n      [`border${uppercaseSide}RightRadius`]: radius,\n      [`border${uppercaseSide}LeftRadius`]: radius\n    };\n  }\n\n  if (uppercaseSide === 'Left' || uppercaseSide === 'Right') {\n    return {\n      [`borderTop${uppercaseSide}Radius`]: radius,\n      [`borderBottom${uppercaseSide}Radius`]: radius\n    };\n  }\n\n  throw new PolishedError(63);\n}\n\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderStyle('solid', 'dashed', 'dotted', 'double')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopStyle': 'solid',\n *   'borderRightStyle': 'dashed',\n *   'borderBottomStyle': 'dotted',\n *   'borderLeftStyle': 'double'\n * }\n */\nfunction borderStyle(...values) {\n  return directionalProperty('borderStyle', ...values);\n}\n\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderWidth('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderWidth('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopWidth': '12px',\n *   'borderRightWidth': '24px',\n *   'borderBottomWidth': '36px',\n *   'borderLeftWidth': '48px'\n * }\n */\nfunction borderWidth(...values) {\n  return directionalProperty('borderWidth', ...values);\n}\n\nfunction generateSelectors(template, state) {\n  const stateSuffix = state ? `:${state}` : '';\n  return template(stateSuffix);\n}\n/**\n * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.\n * @private\n */\n\n\nfunction statefulSelectors(states, template, stateMap) {\n  if (!template) throw new PolishedError(67);\n  if (states.length === 0) return generateSelectors(template, null);\n  let selectors = [];\n\n  for (let i = 0; i < states.length; i += 1) {\n    if (stateMap && stateMap.indexOf(states[i]) < 0) {\n      throw new PolishedError(68);\n    }\n\n    selectors.push(generateSelectors(template, states[i]));\n  }\n\n  selectors = selectors.join(',');\n  return selectors;\n}\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template(state) {\n  return `button${state},\n  input[type=\"button\"]${state},\n  input[type=\"reset\"]${state},\n  input[type=\"submit\"]${state}`;\n}\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */\n\n\nfunction buttons(...states) {\n  return statefulSelectors(states, template, stateMap);\n}\n\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...margin('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${margin('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'marginTop': '12px',\n *   'marginRight': '24px',\n *   'marginBottom': '36px',\n *   'marginLeft': '48px'\n * }\n */\nfunction margin(...values) {\n  return directionalProperty('margin', ...values);\n}\n\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...padding('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${padding('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\nfunction padding(...values) {\n  return directionalProperty('padding', ...values);\n}\n\nconst positionMap$1 = ['absolute', 'fixed', 'relative', 'static', 'sticky'];\n/**\n * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...position('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...position('absolute', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('absolute', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'position': 'absolute',\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n */\n\nfunction position(firstValue, ...values) {\n  if (positionMap$1.indexOf(firstValue) >= 0 && firstValue) {\n    return _extends({}, directionalProperty('', ...values), {\n      position: firstValue\n    });\n  } else {\n    return directionalProperty('', firstValue, ...values);\n  }\n}\n\n/**\n * Shorthand to set the height and width properties in a single statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...size('300px', '250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${size('300px', '250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'height': '300px',\n *   'width': '250px',\n * }\n */\nfunction size(height, width = height) {\n  return {\n    height,\n    width\n  };\n}\n\nconst stateMap$1 = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template$1(state) {\n  return `input[type=\"color\"]${state},\n    input[type=\"date\"]${state},\n    input[type=\"datetime\"]${state},\n    input[type=\"datetime-local\"]${state},\n    input[type=\"email\"]${state},\n    input[type=\"month\"]${state},\n    input[type=\"number\"]${state},\n    input[type=\"password\"]${state},\n    input[type=\"search\"]${state},\n    input[type=\"tel\"]${state},\n    input[type=\"text\"]${state},\n    input[type=\"time\"]${state},\n    input[type=\"url\"]${state},\n    input[type=\"week\"]${state},\n    input:not([type])${state},\n    textarea${state}`;\n}\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'input[type=\"color\"]:active,\n *  input[type=\"date\"]:active,\n *  input[type=\"datetime\"]:active,\n *  input[type=\"datetime-local\"]:active,\n *  input[type=\"email\"]:active,\n *  input[type=\"month\"]:active,\n *  input[type=\"number\"]:active,\n *  input[type=\"password\"]:active,\n *  input[type=\"search\"]:active,\n *  input[type=\"tel\"]:active,\n *  input[type=\"text\"]:active,\n *  input[type=\"time\"]:active,\n *  input[type=\"url\"]:active,\n *  input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */\n\n\nfunction textInputs(...states) {\n  return statefulSelectors(states, template$1, stateMap$1);\n}\n\n/**\n * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same transition values to (second parameter).\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),\n *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};\n *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',\n * }\n */\n\nfunction transitions(...properties) {\n  if (Array.isArray(properties[0]) && properties.length === 2) {\n    const value = properties[1];\n\n    if (typeof value !== 'string') {\n      throw new PolishedError(61);\n    }\n\n    const transitionsString = properties[0].map(property => `${property} ${value}`).join(', ');\n    return {\n      transition: transitionsString\n    };\n  } else {\n    return {\n      transition: properties.join(', ')\n    };\n  }\n}\n\nexport { curriedAdjustHue as adjustHue, animation, backgroundImages, backgrounds, between, border, borderColor, borderRadius, borderStyle, borderWidth, buttons, clearFix, complement, cover, cssVar, curriedDarken as darken, curriedDesaturate as desaturate, directionalProperty, ellipsis, em, fluidRange, fontFace, getContrast, getLuminance, getValueAndUnit, grayscale, hiDPI, hideText, hideVisually, hsl, hslToColorString, hsla, invert, curriedLighten as lighten, linearGradient, margin, math, meetsContrastGuidelines, curriedMix as mix, modularScale, normalize, curriedOpacify as opacify, padding, parseToHsl, parseToRgb, position, radialGradient, readableColor, rem, retinaImage, rgb, rgbToColorString, rgba, curriedSaturate as saturate, curriedSetHue as setHue, curriedSetLightness as setLightness, curriedSetSaturation as setSaturation, curriedShade as shade, size, stripUnit, textInputs, timingFunctions, curriedTint as tint, toColorString, transitions, curriedTransparentize as transparentize, triangle, wordWrap };\n"]},"metadata":{},"sourceType":"module"}