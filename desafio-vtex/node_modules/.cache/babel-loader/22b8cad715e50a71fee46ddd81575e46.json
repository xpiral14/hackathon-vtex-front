{"ast":null,"code":"var _jsxFileName = \"/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      // setIsFilled(!!inputRef.current ?.value)\n      setIsFilled(true);\n    } else {\n      setIsFilled(false);\n    }\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  })), error);\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAO,KAAGC;AAAV,CAAD,KAAqB;AACvD,QAAMC,QAAQ,GAAGR,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACS,SAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM,CAACU,QAAD,EAAYC,WAAZ,IAA2BX,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM;AAAEY,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDb,QAAQ,CAACG,IAAD,CAAlE;AAEA,QAAMW,gBAAgB,GAAGf,WAAW,CAAC,MAAM;AACzCQ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGhB,WAAW,CAAC,MAAM;AAAA;;AACxCQ,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,6BAAIF,QAAQ,CAACW,OAAb,sDAAI,kBAAmBC,KAAvB,EAA8B;AAC5B;AACAR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHD,MAGO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GATkC,EAShC,EATgC,CAAnC;AAWAb,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,aAAa,CAAC;AACZV,MAAAA,IAAI,EAAEO,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAUD,sBACG,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAEL,QAArB;AAA+B,IAAA,SAAS,EAAEF,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAEQ,gBAAhB;AAAkC,IAAA,MAAM,EAAEC,eAA1C;AAA2D,IAAA,YAAY,EAAEJ,YAAzE;AAAuF,IAAA,GAAG,EAAEN;AAA5F,KAA0GD,IAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEGQ,KAFH,CADH;AAMA,CArCD;;AAuCA,eAAeV,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes <HTMLInputElement> {\n  name: string;\n\n}\n\nconst Input: React.FC<InputProps> = ({name, ...rest}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused , setIsFocused] = useState(false);\n  const [isFilled , setIsFilled] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true)\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    if (inputRef.current ?.value) {\n      // setIsFilled(!!inputRef.current ?.value)\n      setIsFilled(true)\n    } else {\n      setIsFilled(false)\n    }\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n\n\n\n return (\n    <Container isFilled={isFilled} isFocused={isFocused}>\n      <input onFocus={handleInputFocus} onBlur={handleInputBlur} defaultValue={defaultValue} ref={inputRef} {...rest}/>\n      {error}\n    </Container>\n )\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}