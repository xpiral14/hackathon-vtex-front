{"ast":null,"code":"var _jsxFileName = \"/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    registerField\n  } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: () => setIsFocused(true),\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","rest","inputRef","isFocused","setIsFocused","fieldName","defaultValue","registerField","handleInputBlur","ref","current","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAO,KAAGC;AAAV,CAAD,KAAqB;AACvD,QAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACS,SAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAA6CV,QAAQ,CAACG,IAAD,CAA3D;AAEA,QAAMQ,eAAe,GAAGZ,WAAW,CAAC,MAAM;AACxCQ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFkC,EAEhC,EAFgC,CAAnC;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,aAAa,CAAC;AACZP,MAAAA,IAAI,EAAEK,SADM;AAEZI,MAAAA,GAAG,EAAEP,QAAQ,CAACQ,OAFF;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACN,SAAD,EAAYE,aAAZ,CANM,CAAT;AAUD,sBACG,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEJ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,IAAD,CAAlC;AAA0C,IAAA,MAAM,EAAEI,eAAlD;AAAmE,IAAA,YAAY,EAAEF,YAAjF;AAA+F,IAAA,GAAG,EAAEJ;AAApG,KAAkHD,IAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADH;AAKA,CAxBD;;AA0BA,eAAeF,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes <HTMLInputElement> {\n  name: string;\n\n}\n\nconst Input: React.FC<InputProps> = ({name, ...rest}) => {\n  const inputRef = useRef(null);\n  const [isFocused , setIsFocused] = useState(false);\n  const { fieldName, defaultValue, registerField } = useField(name);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n\n\n\n return (\n    <Container isFocused={isFocused}>\n      <input onFocus={() => setIsFocused(true)} onBlur={handleInputBlur} defaultValue={defaultValue} ref={inputRef} {...rest}/>\n    </Container>\n )\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}