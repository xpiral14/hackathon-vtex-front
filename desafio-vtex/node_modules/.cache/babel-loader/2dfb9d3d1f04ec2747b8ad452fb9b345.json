{"ast":null,"code":"var _jsxFileName = \"/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/pages/Profile/index.tsx\";\nimport React, { useCallback, useRef } from 'react';\nimport * as Yup from 'yup';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport { Form } from '@unform/web';\nimport { Container } from './styles';\nimport Input from '../../components/Input'; // import Button from '../../components/Button';\n\nconst formRef = useRef(null);\nconst handleSubmit = useCallback(async data => {\n  try {\n    var _formRef$current;\n\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n    const schema = Yup.object().shape({\n      email: Yup.string().required('E-Mail Obrigatório').email('Digite um E-mail válido'),\n      password: Yup.string().required('Senha obrigatória')\n    });\n    await schema.validate(data, {\n      abortEarly: false\n    });\n  } catch (err) {\n    var _formRef$current2;\n\n    console.log(err);\n    const errors = getValidationErrors(err);\n    (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n  }\n}, []);\n\nconst Profile = () => {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"teste\",\n    placeholder: \"Digite Seu Nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Profile;","map":{"version":3,"sources":["/home/junior/Documentos/Projetos/hackathon-vtex-front/desafio-vtex/src/pages/Profile/index.tsx"],"names":["React","useCallback","useRef","Yup","getValidationErrors","Form","Container","Input","formRef","handleSubmit","data","current","setErrors","schema","object","shape","email","string","required","password","validate","abortEarly","err","console","log","errors","Profile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AAEA,SAASC,IAAT,QAAqB,aAArB;AAGA,SAASC,SAAT,QAAyB,UAAzB;AAEA,OAAOC,KAAP,MAAkB,wBAAlB,C,CACA;;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAAc,IAAd,CAAtB;AAEA,MAAMO,YAAY,GAAGR,WAAW,CAAC,MAAOS,IAAP,IAAyB;AACxD,MAAI;AAAA;;AAEF,wBAAAF,OAAO,CAACG,OAAR,sEAAiBC,SAAjB,CAA2B,EAA3B;AACA,UAAMC,MAAM,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,MAAAA,KAAK,EAAEb,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,EAA4CF,KAA5C,CAAkD,yBAAlD,CADyB;AAEhCG,MAAAA,QAAQ,EAAEhB,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB;AAFsB,KAAnB,CAAf;AAIA,UAAML,MAAM,CAACO,QAAP,CAAgBV,IAAhB,EAAsB;AAC1BW,MAAAA,UAAU,EAAE;AADc,KAAtB,CAAN;AAMD,GAbD,CAaE,OAAOC,GAAP,EAAY;AAAA;;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,UAAMG,MAAM,GAAGrB,mBAAmB,CAACkB,GAAD,CAAlC;AACA,yBAAAd,OAAO,CAACG,OAAR,wEAAiBC,SAAjB,CAA2Ba,MAA3B;AACD;AACF,CApB+B,EAoB7B,EApB6B,CAAhC;;AAsBA,MAAMC,OAAiB,GAAG,MAAM;AAC9B,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAElB,OAAX;AAAoB,IAAA,QAAQ,EAAEC,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,WAAW,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CARD;;AAUA,eAAeiB,OAAf","sourcesContent":["import React, { useCallback, useRef } from 'react';\n\nimport * as Yup from 'yup';\nimport getValidationErrors from '../../utils/getValidationErrors';\n\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\n\nimport { Container} from './styles';\n\nimport Input from '../../components/Input';\n// import Button from '../../components/Button';\n\nconst formRef = useRef<FormHandles>(null);\n\nconst handleSubmit = useCallback(async (data : object) => {\n  try {\n\n    formRef.current?.setErrors({});\n    const schema = Yup.object().shape({\n      email: Yup.string().required('E-Mail Obrigatório').email('Digite um E-mail válido'),\n      password: Yup.string().required('Senha obrigatória')\n    });\n    await schema.validate(data, {\n      abortEarly: false,\n    });  \n\n\n    \n  } catch (err) {\n    console.log(err);\n\n    const errors = getValidationErrors(err);\n    formRef.current?.setErrors(errors);\n  }\n}, []);\n\nconst Profile: React.FC = () => {\n  return (\n    <Container>\n      <Form ref={formRef} onSubmit={handleSubmit}>\n        <Input name=\"teste\" placeholder=\"Digite Seu Nome\"></Input>\n      </Form>\n    </Container>\n  );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}